WindowSaver& WindowSaver::setupProfile ()
{
// This member function is NOT generated by Visual Builder

   IString appName = IApplication::current().argv( 0 );
    
   char path_buffer[_MAX_PATH];
   char drive[_MAX_DRIVE];                                  
   char dir[_MAX_DIR];
   char fname[_MAX_FNAME];
   char ext[_MAX_EXT];

   strcpy( path_buffer, appName );

   _splitpath(path_buffer, drive, dir, fname, ext);

   iTheProfile =  new IProfile ( IProfile::userProfile() );

   IString temp = iTheProfile->defaultApplicationName();

   temp = IString( fname ) + IString( ":Window Parms" );

   setApplicationName( temp );

   return *this;
}

// Feature source code generation begins here...

INotificationId WindowSaver::applicationNameId = "WindowSaver::applicationName";
INotificationId WindowSaver::profileNameId = "WindowSaver::profileName";
INotificationId WindowSaver::theProfileId = "WindowSaver::theProfile";

IFrameWindow* WindowSaver::theFrameWindow() const
{
  return iTheFrameWindow;
}

WindowSaver& WindowSaver::setTheFrameWindow(IFrameWindow* aTheFrameWindow)
{
  if (!(iTheFrameWindow == aTheFrameWindow))
  {
    iTheFrameWindow = aTheFrameWindow;
  } // endif
  return *this;
}

WindowSaver& WindowSaver::saveWindowParms()
{
  iTheProfile->addOrReplaceElementWithKey( "WIDTH", iTheFrameWindow->size().width(), this->applicationName()  );
  iTheProfile->addOrReplaceElementWithKey( "HEIGHT",iTheFrameWindow->size().height(), this->applicationName() );
  iTheProfile->addOrReplaceElementWithKey( "XPOS",  iTheFrameWindow->position().x(), this->applicationName()  );
  iTheProfile->addOrReplaceElementWithKey( "YPOS",  iTheFrameWindow->position().y(), this->applicationName()  );
  return *this;
}

WindowSaver& WindowSaver::getWindowParms()
{
  iTheFrameWindow->sizeTo( ISize( iTheProfile->integerWithKey( "WIDTH" , this->applicationName()  )
                                , iTheProfile->integerWithKey( "HEIGHT", this->applicationName() )));

  iTheFrameWindow->moveTo( IPoint( iTheProfile->integerWithKey( "XPOS", this->applicationName() )
                                 , iTheProfile->integerWithKey( "YPOS", this->applicationName() )));

  return *this;
}

IString WindowSaver::applicationName() const
{
  return iApplicationName;
}

WindowSaver& WindowSaver::setApplicationName(const IString& aApplicationName)
{
  if (!(iApplicationName == aApplicationName))
  {
    iApplicationName = aApplicationName;
//    iTheProfile->setDefaultApplicationName( iApplicationName );
    notifyObservers(INotificationEvent(WindowSaver::applicationNameId, *this));
  } // endif
  return *this;
}


IProfile* WindowSaver::theProfile() const
{
  return iTheProfile;
}

WindowSaver& WindowSaver::setTheProfile(IProfile* aTheProfile)
{
  if (!(iTheProfile == aTheProfile))
  {
    iTheProfile = aTheProfile;
    notifyObservers(INotificationEvent(WindowSaver::theProfileId, *this));
  } // endif
  return *this;
}

// Feature source code generation ends here.
