/*******************************************************************************
* FILE NAME: WndwSvrT.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     WindowSaverTest- Tests the window saver part                             *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _WINDOWSAVER_
#include "WndSaver.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _WINDOWSAVERTEST_
#include "WndwSvrT.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for WindowSaverTestConn0
//*****************************************************************************
class WindowSaverTestConn0 : public IObserver {
public:
   virtual  ~WindowSaverTestConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, WindowSaver * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(this) to windowSaver(theFrameWindow))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTheFrameWindow(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   WindowSaver * target;
   Boolean aligning;


};   //WindowSaverTestConn0


//*****************************************************************************
// Class definition for WindowSaverTestConn1
//*****************************************************************************
class WindowSaverTestConn1 : public IObserver, public IStandardNotifier {
public:
   virtual  ~WindowSaverTestConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(WindowSaverTest * aSource, WindowSaver * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == WindowSaverTest::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to windowSaver(getWindowParms))");
         try {target->getWindowParms();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   WindowSaverTest * source;
   WindowSaver * target;


};   //WindowSaverTestConn1


//*****************************************************************************
// Class definition for WindowSaverTestConn2
//*****************************************************************************
class WindowSaverTestConn2 : public IObserver, public IStandardNotifier {
public:
   virtual  ~WindowSaverTestConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, WindowSaver * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FrameWindow(closeEvent) to windowSaver(saveWindowParms))");
         try {target->saveWindowParms();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   WindowSaver * target;


};   //WindowSaverTestConn2


//*****************************************************************************
// Class definition for WindowSaverTestConn3
//*****************************************************************************
class WindowSaverTestConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~WindowSaverTestConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : PushButton11(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //WindowSaverTestConn3


#pragma export (WindowSaverTest::readyId)
const INotificationId WindowSaverTest::readyId = "WindowSaverTest::readyId";

//------------------------------------------------------------------------------
// WindowSaverTest :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (WindowSaverTest::defaultFramingSpec())
const IRectangle WindowSaverTest::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 267),ISize(364, 267)));
}


//------------------------------------------------------------------------------
// WindowSaverTest :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (WindowSaverTest::defaultTitle())
IString WindowSaverTest::defaultTitle()
{
   return("Test of smart window");
}


//------------------------------------------------------------------------------
// WindowSaverTest :: WindowSaverTest
//------------------------------------------------------------------------------
#pragma export (WindowSaverTest::WindowSaverTest(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
WindowSaverTest::WindowSaverTest(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iMultiCellCanvas11 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iStaticText11 = new IStaticText(
      id+WNDOFFSET_WindowSaverTest_StaticText11, 
      iMultiCellCanvas11, 
      iMultiCellCanvas11, 
      IRectangle());
   iStaticText21 = new IStaticText(
      id+WNDOFFSET_WindowSaverTest_StaticText21, 
      iMultiCellCanvas11, 
      iMultiCellCanvas11, 
      IRectangle());
   iStaticText31 = new IStaticText(
      id+WNDOFFSET_WindowSaverTest_StaticText31, 
      iMultiCellCanvas11, 
      iMultiCellCanvas11, 
      IRectangle());
   iPushButton11 = new IPushButton(
      id+WNDOFFSET_WindowSaverTest_PushButton11, 
      iMultiCellCanvas11, 
      iMultiCellCanvas11, 
      IRectangle());
   iwindowSaver = new WindowSaver();

   conn0 = new WindowSaverTestConn0();
   conn1 = new WindowSaverTestConn1();
   conn2 = new WindowSaverTestConn2();
   conn3 = new WindowSaverTestConn3();

   iMultiCellCanvas11->addToCell(iStaticText11, 2, 2, 1, 1);
   iMultiCellCanvas11->addToCell(iStaticText21, 2, 3, 1, 1);
   iMultiCellCanvas11->addToCell(iStaticText31, 2, 4, 1, 1);
   iMultiCellCanvas11->addToCell(iPushButton11, 2, 6, 1, 1);
   iMultiCellCanvas11->setColumnWidth(2, IMultiCellCanvas::defaultCell().width(), true);
   iMultiCellCanvas11->setColumnWidth(3, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas11->setRowHeight(1, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas11->setRowHeight(7, IMultiCellCanvas::defaultCell().height(), true);
   iStaticText11->setAlignment(IStaticText::centerCenter);
   iStaticText11->setText("Move around and size window,");
   iStaticText21->setAlignment(IStaticText::centerCenter);
   iStaticText21->setText("Then Quit and restart.");
   iStaticText31->setAlignment(IStaticText::centerCenter);
   iStaticText31->setText("Window size and position are saved");
   iPushButton11->setText("~Quit");
   this->setFocus();
   this->setClient(iMultiCellCanvas11);
}     //end constructor


//------------------------------------------------------------------------------
// WindowSaverTest :: ~WindowSaverTest
//------------------------------------------------------------------------------
#pragma export (WindowSaverTest::~WindowSaverTest())
WindowSaverTest::~WindowSaverTest()
{
   conn0->stopHandlingNotificationsFor(*this);
   conn0->stopHandlingNotificationsFor(*iwindowSaver);
   conn1->stopHandlingNotificationsFor(*this);
   conn2->stopHandlingNotificationsFor(*this);
   conn3->stopHandlingNotificationsFor(*iPushButton11);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;


   delete iMultiCellCanvas11;
   delete iStaticText11;
   delete iStaticText21;
   delete iStaticText31;
   delete iPushButton11;
   delete iwindowSaver;
}

//------------------------------------------------------------------------------
// WindowSaverTest :: initializePart
//------------------------------------------------------------------------------
#pragma export (WindowSaverTest::initializePart())
WindowSaverTest & WindowSaverTest::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// WindowSaverTest :: makeConnections
//------------------------------------------------------------------------------
#pragma export (WindowSaverTest::makeConnections())
Boolean WindowSaverTest::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas11->enableNotification();
   iStaticText11->enableNotification();
   iStaticText21->enableNotification();
   iStaticText31->enableNotification();
   iPushButton11->enableNotification();
   iwindowSaver->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(this, iwindowSaver);
   conn0->handleNotificationsFor(*this);
   conn0->handleNotificationsFor(*iwindowSaver);
   conn1->initialize(this, iwindowSaver);
   conn1->handleNotificationsFor(*this);
   conn2->initialize(this, iwindowSaver);
   conn2->handleNotificationsFor(*this);
   conn3->initialize(iPushButton11, this);
   conn3->handleNotificationsFor(*iPushButton11);

   conn0->setTarget();
   return true;
}



