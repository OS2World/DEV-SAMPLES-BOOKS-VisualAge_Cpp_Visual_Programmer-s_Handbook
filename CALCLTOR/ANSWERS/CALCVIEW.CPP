/*******************************************************************************
* FILE NAME: CalcView.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     CalcView- This is the view for the adding machine application            *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ICANVAS_
#include <icanvas.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _KBDHDR_
#include "kbdhdr.hpp"
#endif

#ifndef _ITBAR_
#include <itbar.hpp>
#endif

#ifndef _IPOPMENU_
#include <ipopmenu.hpp>
#endif

#ifndef _IVBMENUH_
#include <ivbmenuh.hpp>
#endif

#ifndef _ITBARBUT_
#include <itbarbut.hpp>
#endif

#ifndef _IRESLIB_
#include <ireslib.hpp>
#endif

#ifndef _CALC_
#include "Calc.hpp"
#endif

#ifndef _IVBFLY_
#include <ivbfly.hpp>
#endif

#ifndef _IMSGBOX_
#include <imsgbox.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _CALCVIEW_
#include "CalcView.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for CalcViewConn1
//*****************************************************************************
class CalcViewConn1 : public IObserver {
public:
   virtual  ~CalcViewConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Calc * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(num1) to efNum1(valueAsDouble))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setNum1(target->VBDOUBLEVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(num1) to efNum1(valueAsDouble))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->num1());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Calc::num1Id) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Calc * source;
   IEntryField * target;
   Boolean aligning;


};   //CalcViewConn1


//*****************************************************************************
// Class definition for CalcViewConn2
//*****************************************************************************
class CalcViewConn2 : public IObserver {
public:
   virtual  ~CalcViewConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Calc * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(num2) to efNum2(valueAsDouble))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setNum2(target->VBDOUBLEVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(num2) to efNum2(valueAsDouble))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->num2());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Calc::num2Id) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Calc * source;
   IEntryField * target;
   Boolean aligning;


};   //CalcViewConn2


//*****************************************************************************
// Class definition for CalcViewConn3
//*****************************************************************************
class CalcViewConn3 : public IObserver {
public:
   virtual  ~CalcViewConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Calc * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(result) to efResult(valueAsDouble))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setResult(target->VBDOUBLEVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(result) to efResult(valueAsDouble))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->result());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Calc::resultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Calc * source;
   IEntryField * target;
   Boolean aligning;


};   //CalcViewConn3


//*****************************************************************************
// Class definition for CalcViewConn4
//*****************************************************************************
class CalcViewConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, Calc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbAdd(buttonClickEvent) to calculator(add))");
         try {target->add();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   Calc * target;


};   //CalcViewConn4


//*****************************************************************************
// Class definition for CalcViewConn14
//*****************************************************************************
class CalcViewConn14 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn14(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbClear(buttonClickEvent) to efNum1(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   IEntryField * target;


};   //CalcViewConn14


//*****************************************************************************
// Class definition for CalcViewConn5
//*****************************************************************************
class CalcViewConn5 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbClear(buttonClickEvent) to efNum2(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   IEntryField * target;


};   //CalcViewConn5


//*****************************************************************************
// Class definition for CalcViewConn6
//*****************************************************************************
class CalcViewConn6 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbClear(buttonClickEvent) to efResult(text))");
         try {target->setText("0");}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   IEntryField * target;


};   //CalcViewConn6


//*****************************************************************************
// Class definition for CalcViewConn7
//*****************************************************************************
class CalcViewConn7 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CalcView * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CalcView::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to FrameWindow(icon))");
         try {target->setIcon(IResourceId(6, IDynamicLinkLibrary("bitmaps")));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CalcView * source;
   IFrameWindow * target;


};   //CalcViewConn7


//*****************************************************************************
// Class definition for CalcViewConn9
//*****************************************************************************
class CalcViewConn9 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   CalcViewConn9(unsigned long tid) {id = tid;};

   virtual  ~CalcViewConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPopUpMenu * aSource, IToolBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBar::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_CalcView_MenuItem1)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : MenuItem1(commandEvent) to tbCalc(buttonView))");
         try {target->setButtonView(IToolBarButton::bitmapView);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPopUpMenu * source;
   IToolBar * target;
   unsigned long id;


};   //CalcViewConn9


//*****************************************************************************
// Class definition for CalcViewConn10
//*****************************************************************************
class CalcViewConn10 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   CalcViewConn10(unsigned long tid) {id = tid;};

   virtual  ~CalcViewConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPopUpMenu * aSource, IToolBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBar::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_CalcView_MenuItem2)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : MenuItem2(commandEvent) to tbCalc(buttonView))");
         try {target->setButtonView(IToolBarButton::textView);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPopUpMenu * source;
   IToolBar * target;
   unsigned long id;


};   //CalcViewConn10


//*****************************************************************************
// Class definition for CalcViewConn11
//*****************************************************************************
class CalcViewConn11 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   CalcViewConn11(unsigned long tid) {id = tid;};

   virtual  ~CalcViewConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPopUpMenu * aSource, IToolBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBar::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_CalcView_MenuItem3)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : MenuItem3(commandEvent) to tbCalc(buttonView))");
         try {target->setButtonView(IToolBarButton::bitmapAndTextView);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPopUpMenu * source;
   IToolBar * target;
   unsigned long id;


};   //CalcViewConn11


//*****************************************************************************
// Class definition for CalcViewConn12
//*****************************************************************************
class CalcViewConn12 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, Calc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbSubtract(buttonClickEvent) to calculator(subtract))");
         try {target->subtract();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   Calc * target;


};   //CalcViewConn12


//*****************************************************************************
// Class definition for CalcViewConn13
//*****************************************************************************
class CalcViewConn13 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn13(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, Calc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbMultiply(buttonClickEvent) to calculator(multiply))");
         try {target->multiply();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   Calc * target;


};   //CalcViewConn13


//*****************************************************************************
// Class definition for CalcViewConn24
//*****************************************************************************
class CalcViewConn24 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn24(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IToolBarButton * aSource, Calc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IToolBarButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : tbbDivide(buttonClickEvent) to calculator(divide))");
         try {target->divide();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IToolBarButton * source;
   Calc * target;


};   //CalcViewConn24

const INotificationId CalcViewConn24::exceptionId = "CalcViewConn24::exceptionId";

//*****************************************************************************
// Class definition for CalcViewConn15
//*****************************************************************************
class CalcViewConn15 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CalcViewConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CalcViewConn24 * aSource, IMessageBox * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CalcViewConn24::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn24(exceptionOccurred) to errorMessageBox(showException))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CalcViewConn24 * source;
   IMessageBox * target;


};   //CalcViewConn15


#pragma export (CalcView::readyId)
const INotificationId CalcView::readyId = "CalcView::readyId";

//------------------------------------------------------------------------------
// CalcView :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (CalcView::defaultFramingSpec())
const IRectangle CalcView::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 345),ISize(324, 345)));
}


//------------------------------------------------------------------------------
// CalcView :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (CalcView::defaultStyle())
const IFrameWindow::Style CalcView::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::sizingBorder | IFrameWindow::dialogBorder);
}


//------------------------------------------------------------------------------
// CalcView :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (CalcView::defaultTitle())
IString CalcView::defaultTitle()
{
   return("Calculator");
}


//------------------------------------------------------------------------------
// CalcView :: CalcView
//------------------------------------------------------------------------------
#pragma export (CalcView::CalcView(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
CalcView::CalcView(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iCanvas = new ICanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   itxtNum1 = new IStaticText(
      id+WNDOFFSET_CalcView_txtNum1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(20,195),ISize(108, 25)));
   itxtNum2 = new IStaticText(
      id+WNDOFFSET_CalcView_txtNum2, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(33,63),ISize(56, 25)));
   itxtResult = new IStaticText(
      id+WNDOFFSET_CalcView_txtResult, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(20,129),ISize(131, 25)));
   iefResult = new IEntryField(
      id+WNDOFFSET_CalcView_efResult, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(20,30),ISize(283, 25)), 
      IEntryField::defaultStyle() & ~IControl::tabStop | IEntryField::readOnly);
   iefNum1 = new IEntryField(
      id+WNDOFFSET_CalcView_efNum1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(20,162),ISize(283, 25)), 
      IEntryField::defaultStyle() | IControl::group | IControl::tabStop);
   iefNum2 = new IEntryField(
      id+WNDOFFSET_CalcView_efNum2, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(20,96),ISize(283, 25)), 
      IEntryField::defaultStyle() | IControl::tabStop);
   itbCalc = new IToolBar(
      id+WNDOFFSET_CalcView_tbCalc, 
      this, 
      IToolBar::belowClient, 
      false, 
      IToolBar::defaultStyle() | IToolBar::buttonBitmapAndTextVisible);
   itbCalcMenu = new IPopUpMenu(itbCalc, id+WNDOFFSET_CalcView_Menu1);
   itbCalcMenu->addText(id+WNDOFFSET_CalcView_MenuItem1, "bitmap");
   itbCalcMenu->addText(id+WNDOFFSET_CalcView_MenuItem2, "text");
   itbCalcMenu->addText(id+WNDOFFSET_CalcView_MenuItem3, "bitmap and text");
   itbbAdd = new IToolBarButton(
      id+WNDOFFSET_CalcView_tbbAdd, 
      itbCalc, 
      itbCalc, 
      IRectangle(), 
      IToolBarButton::defaultStyle() | IControl::group);
   itbbSubtract = new IToolBarButton(
      id+WNDOFFSET_CalcView_tbbSubtract, 
      itbCalc, 
      itbCalc, 
      IRectangle(), 
      IToolBarButton::defaultStyle() & ~IControl::group);
   itbbMultiply = new IToolBarButton(
      id+WNDOFFSET_CalcView_tbbMultiply, 
      itbCalc, 
      itbCalc, 
      IRectangle(), 
      IToolBarButton::defaultStyle() & ~IControl::group);
   itbbDivide = new IToolBarButton(
      id+WNDOFFSET_CalcView_tbbDivide, 
      itbCalc, 
      itbCalc, 
      IRectangle(), 
      IToolBarButton::defaultStyle() & ~IControl::group);
   itbbClear = new IToolBarButton(
      id+WNDOFFSET_CalcView_tbbClear, 
      itbCalc, 
      itbCalc, 
      IRectangle(), 
      IToolBarButton::defaultStyle() & ~IControl::group);
   icalculator = new Calc();
   iVBFlyText1 = new IVBFlyText(this);
   ierrorMessageBox = new IMessageBox(this);

   conn1 = new CalcViewConn1();
   conn2 = new CalcViewConn2();
   conn3 = new CalcViewConn3();
   conn4 = new CalcViewConn4();
   conn14 = new CalcViewConn14();
   conn5 = new CalcViewConn5();
   conn6 = new CalcViewConn6();
   conn7 = new CalcViewConn7();
   conn9 = new CalcViewConn9(id);
   conn10 = new CalcViewConn10(id);
   conn11 = new CalcViewConn11(id);
   conn12 = new CalcViewConn12();
   conn13 = new CalcViewConn13();
   conn24 = new CalcViewConn24();
   conn15 = new CalcViewConn15();

   itxtNum1->setText("First Number");
   itxtNum2->setText("Result");
   itxtResult->setText("Second Number");
   iefNum1->setLimit(10);
   iefNum1NumDecOnlyKbdHandler = new NumDecOnlyKbdHandler();
   iefNum1NumDecOnlyKbdHandler->handleEventsFor(iefNum1);
   iefNum2->setLimit(10);
   iefNum2NumDecOnlyKbdHandler = new NumDecOnlyKbdHandler();
   iefNum2NumDecOnlyKbdHandler->handleEventsFor(iefNum2);
   itbCalc->addAsLast(itbbAdd, itbbAdd->isGroup());
   itbCalc->addAsLast(itbbSubtract, itbbSubtract->isGroup());
   itbCalc->addAsLast(itbbMultiply, itbbMultiply->isGroup());
   itbCalc->addAsLast(itbbDivide, itbbDivide->isGroup());
   itbCalc->addAsLast(itbbClear, itbbClear->isGroup());
   itbCalcIVBPopupMenuHandler = new IVBPopupMenuHandler(itbCalcMenu);
   itbCalcIVBPopupMenuHandler->handleEventsFor(itbCalc);
   itbCalc->setFloatingTitle("Calculator tool bar");
   itbbAdd->setBitmap(IResourceId(1, IDynamicLinkLibrary("bitmaps")));
   itbbAdd->setText("Add");
   itbbSubtract->setBitmap(IResourceId(2, IDynamicLinkLibrary("bitmaps")));
   itbbSubtract->setText("Subtract");
   itbbMultiply->setBitmap(IResourceId(3, IDynamicLinkLibrary("bitmaps")));
   itbbMultiply->setText("Multiply");
   itbbDivide->setBitmap(IResourceId(4, IDynamicLinkLibrary("bitmaps")));
   itbbDivide->setText("Divide");
   itbbClear->setBitmap(IResourceId(5, IDynamicLinkLibrary("bitmaps")));
   itbbClear->setText("Clear");
   this->setFocus();
   this->setClient(iCanvas);
   icalculator->setNum2(0);
   icalculator->setResult(0);
   icalculator->setNum1(0);
}     //end constructor


//------------------------------------------------------------------------------
// CalcView :: ~CalcView
//------------------------------------------------------------------------------
#pragma export (CalcView::~CalcView())
CalcView::~CalcView()
{
   conn1->stopHandlingNotificationsFor(*icalculator);
   conn1->stopHandlingNotificationsFor(*iefNum1);
   conn2->stopHandlingNotificationsFor(*icalculator);
   conn2->stopHandlingNotificationsFor(*iefNum2);
   conn3->stopHandlingNotificationsFor(*icalculator);
   conn3->stopHandlingNotificationsFor(*iefResult);
   conn4->stopHandlingNotificationsFor(*itbbAdd);
   conn14->stopHandlingNotificationsFor(*itbbClear);
   conn5->stopHandlingNotificationsFor(*itbbClear);
   conn6->stopHandlingNotificationsFor(*itbbClear);
   conn7->stopHandlingNotificationsFor(*this);
   conn9->stopHandlingNotificationsFor(*itbCalc);
   conn10->stopHandlingNotificationsFor(*itbCalc);
   conn11->stopHandlingNotificationsFor(*itbCalc);
   conn12->stopHandlingNotificationsFor(*itbbSubtract);
   conn13->stopHandlingNotificationsFor(*itbbMultiply);
   conn24->stopHandlingNotificationsFor(*itbbDivide);
   conn15->stopHandlingNotificationsFor(*conn24);

   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn14;
   delete conn5;
   delete conn6;
   delete conn7;
   delete conn9;
   delete conn10;
   delete conn11;
   delete conn12;
   delete conn13;
   delete conn24;
   delete conn15;

   iefNum1NumDecOnlyKbdHandler->stopHandlingEventsFor(iefNum1);
   delete iefNum1NumDecOnlyKbdHandler;
   iefNum2NumDecOnlyKbdHandler->stopHandlingEventsFor(iefNum2);
   delete iefNum2NumDecOnlyKbdHandler;
   delete itbCalcMenu;
   itbCalcIVBPopupMenuHandler->stopHandlingEventsFor(itbCalc);
   delete itbCalcIVBPopupMenuHandler;

   delete iCanvas;
   delete itxtNum1;
   delete itxtNum2;
   delete itxtResult;
   delete iefResult;
   delete iefNum1;
   delete iefNum2;
   delete itbCalc;
   delete itbbAdd;
   delete itbbSubtract;
   delete itbbMultiply;
   delete itbbDivide;
   delete itbbClear;
   delete icalculator;
   delete iVBFlyText1;
   delete ierrorMessageBox;
}

//------------------------------------------------------------------------------
// CalcView :: initializePart
//------------------------------------------------------------------------------
#pragma export (CalcView::initializePart())
CalcView & CalcView::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// CalcView :: makeConnections
//------------------------------------------------------------------------------
#pragma export (CalcView::makeConnections())
Boolean CalcView::makeConnections()
{
   this->enableNotification();
   iCanvas->enableNotification();
   itxtNum1->enableNotification();
   itxtNum2->enableNotification();
   itxtResult->enableNotification();
   iefResult->enableNotification();
   iefNum1->enableNotification();
   iefNum2->enableNotification();
   itbCalc->enableNotification();
   itbbAdd->enableNotification();
   itbbSubtract->enableNotification();
   itbbMultiply->enableNotification();
   itbbDivide->enableNotification();
   itbbClear->enableNotification();
   icalculator->enableNotification();
   iVBFlyText1->enableNotification();

   unsigned long id = this->id();
   conn1->initialize(icalculator, iefNum1);
   conn1->handleNotificationsFor(*icalculator);
   conn1->handleNotificationsFor(*iefNum1);
   conn2->initialize(icalculator, iefNum2);
   conn2->handleNotificationsFor(*icalculator);
   conn2->handleNotificationsFor(*iefNum2);
   conn3->initialize(icalculator, iefResult);
   conn3->handleNotificationsFor(*icalculator);
   conn3->handleNotificationsFor(*iefResult);
   conn4->initialize(itbbAdd, icalculator);
   conn4->handleNotificationsFor(*itbbAdd);
   conn14->initialize(itbbClear, iefNum1);
   conn14->handleNotificationsFor(*itbbClear);
   conn5->initialize(itbbClear, iefNum2);
   conn5->handleNotificationsFor(*itbbClear);
   conn6->initialize(itbbClear, iefResult);
   conn6->handleNotificationsFor(*itbbClear);
   conn7->initialize(this, this);
   conn7->handleNotificationsFor(*this);
   conn9->initialize(itbCalcMenu, itbCalc);
   conn9->handleNotificationsFor(*itbCalc);
   conn10->initialize(itbCalcMenu, itbCalc);
   conn10->handleNotificationsFor(*itbCalc);
   conn11->initialize(itbCalcMenu, itbCalc);
   conn11->handleNotificationsFor(*itbCalc);
   conn12->initialize(itbbSubtract, icalculator);
   conn12->handleNotificationsFor(*itbbSubtract);
   conn13->initialize(itbbMultiply, icalculator);
   conn13->handleNotificationsFor(*itbbMultiply);
   conn24->initialize(itbbDivide, icalculator);
   conn24->handleNotificationsFor(*itbbDivide);
   conn15->initialize(conn24, ierrorMessageBox);
   conn15->handleNotificationsFor(*conn24);

   conn1->setTarget();
   conn2->setTarget();
   conn3->setTarget();
   return true;
}



