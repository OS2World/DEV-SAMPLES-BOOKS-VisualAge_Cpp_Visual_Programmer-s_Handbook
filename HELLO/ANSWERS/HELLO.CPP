/*******************************************************************************
* FILE NAME: Hello.cpp                                                         *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     Hello- Hello World - My first VA C++ Application                         *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ICANVAS_
#include <icanvas.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IFONT_
#include <ifont.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _HELLO_
#include "Hello.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for HelloConn0
//*****************************************************************************
class HelloConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~HelloConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : pbExit(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //HelloConn0


#pragma export (Hello::readyId)
const INotificationId Hello::readyId = "Hello::readyId";

//------------------------------------------------------------------------------
// Hello :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (Hello::defaultFramingSpec())
const IRectangle Hello::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 384),ISize(512, 384)));
}


//------------------------------------------------------------------------------
// Hello :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (Hello::defaultTitle())
IString Hello::defaultTitle()
{
   return("Hello World Application");
}


//------------------------------------------------------------------------------
// Hello :: Hello
//------------------------------------------------------------------------------
#pragma export (Hello::Hello(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
Hello::Hello(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iCanvas = new ICanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iStaticText1 = new IStaticText(
      id+WNDOFFSET_Hello_StaticText1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(146,212),ISize(211, 54)));
   ipbExit = new IPushButton(
      id+WNDOFFSET_Hello_pbExit, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(224,90),ISize(56, 34)));

   conn0 = new HelloConn0();

   iStaticText1->setFont(IFont("Times New Roman Bold Italic", 24, false, true).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iStaticText1->setText("Hello World");
   ipbExit->setText("E~xit");
   this->setFocus();
   this->setClient(iCanvas);
}     //end constructor


//------------------------------------------------------------------------------
// Hello :: ~Hello
//------------------------------------------------------------------------------
#pragma export (Hello::~Hello())
Hello::~Hello()
{
   conn0->stopHandlingNotificationsFor(*ipbExit);

   delete conn0;


   delete iCanvas;
   delete iStaticText1;
   delete ipbExit;
}

//------------------------------------------------------------------------------
// Hello :: initializePart
//------------------------------------------------------------------------------
#pragma export (Hello::initializePart())
Hello & Hello::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// Hello :: makeConnections
//------------------------------------------------------------------------------
#pragma export (Hello::makeConnections())
Boolean Hello::makeConnections()
{
   this->enableNotification();
   iCanvas->enableNotification();
   iStaticText1->enableNotification();
   ipbExit->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(ipbExit, this);
   conn0->handleNotificationsFor(*ipbExit);

   return true;
}



