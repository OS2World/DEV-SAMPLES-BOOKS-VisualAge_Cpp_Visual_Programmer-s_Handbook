/*******************************************************************************
* FILE NAME: PhnEntry.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     PhoneEntry- A phone number entry part                                    *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _ISETCV_
#include <isetcv.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _KBDHDR_
#include "kbdhdr.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _PHONEENTRY_
#include "PhnEntry.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for PhoneEntryConn0
//*****************************************************************************
class PhoneEntryConn0 : public IObserver {
public:
   virtual  ~PhoneEntryConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(PhoneParser * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(areaCode) to efAC(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setAreaCode(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(areaCode) to efAC(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->areaCode());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == PhoneParser::areaCodeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   PhoneParser * source;
   IEntryField * target;
   Boolean aligning;


};   //PhoneEntryConn0


//*****************************************************************************
// Class definition for PhoneEntryConn1
//*****************************************************************************
class PhoneEntryConn1 : public IObserver {
public:
   virtual  ~PhoneEntryConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(PhoneParser * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(prefix) to efPrefix(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setPrefix(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(prefix) to efPrefix(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->prefix());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == PhoneParser::prefixId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   PhoneParser * source;
   IEntryField * target;
   Boolean aligning;


};   //PhoneEntryConn1


//*****************************************************************************
// Class definition for PhoneEntryConn2
//*****************************************************************************
class PhoneEntryConn2 : public IObserver {
public:
   virtual  ~PhoneEntryConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(PhoneParser * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(number) to efPhNum(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setNumber(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(number) to efPhNum(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->number());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == PhoneParser::numberId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   PhoneParser * source;
   IEntryField * target;
   Boolean aligning;


};   //PhoneEntryConn2


#pragma export (PhoneEntry::readyId)
const INotificationId PhoneEntry::readyId = "PhoneEntry::readyId";

#pragma export (PhoneEntry::phoneAsString)
const INotificationId PhoneEntry::phoneAsString = "PhoneEntry::phoneAsString";

//------------------------------------------------------------------------------
// PhoneEntry :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (PhoneEntry::defaultFramingSpec())
IRectangle PhoneEntry::defaultFramingSpec()
{
   return(IRectangle(IPoint(28,280),ISize(147, 24)));
}


//------------------------------------------------------------------------------
// PhoneEntry :: PhoneEntry
//------------------------------------------------------------------------------
#pragma export (PhoneEntry::PhoneEntry(unsigned long, IWindow *, IWindow *, const IRectangle &, const ISetCanvas::Style &))
PhoneEntry::PhoneEntry(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const ISetCanvas::Style & style)
   : ISetCanvas(id, parent, owner, rect, style)
{
   itxt1 = new IEntryField(
      id+WNDOFFSET_PhoneEntry_txt1, 
      this, 
      this, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::readOnly);
   iefAC = new IEntryField(
      id+WNDOFFSET_PhoneEntry_efAC, 
      this, 
      this, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::autoTab | IControl::tabStop | IControl::group);
   itxt2 = new IEntryField(
      id+WNDOFFSET_PhoneEntry_txt2, 
      this, 
      this, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IEntryField::margin & ~IControl::tabStop | IEntryField::readOnly);
   iefPrefix = new IEntryField(
      id+WNDOFFSET_PhoneEntry_efPrefix, 
      this, 
      this, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::autoTab | IControl::tabStop);
   itxt3 = new IEntryField(
      id+WNDOFFSET_PhoneEntry_txt3, 
      this, 
      this, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::readOnly);
   iefPhNum = new IEntryField(
      id+WNDOFFSET_PhoneEntry_efPhNum, 
      this, 
      this, 
      IRectangle(), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IControl::tabStop);
   iphoneParser = new PhoneParser();

   conn0 = new PhoneEntryConn0();
   conn1 = new PhoneEntryConn1();
   conn2 = new PhoneEntryConn2();

   this->setMargin(ISize(2, 2));
   this->setPad(ISize(0, 0));
   itxt1->setLimit(1);
   itxt1->setAlignment(IEntryField::center);
   itxt1->setMinimumSize(ISize(13, 20));
   itxt1->enableInsertMode(false);
   itxt1->setText("(");
   iefAC->setLimit(3);
   iefACNumOnlyKbdHandler = new NumOnlyKbdHandler();
   iefACNumOnlyKbdHandler->handleEventsFor(iefAC);
   iefAC->setAlignment(IEntryField::center);
   iefAC->setMinimumSize(ISize(32, 20));
   itxt2->setLimit(1);
   itxt2->setAlignment(IEntryField::center);
   itxt2->setMinimumSize(ISize(15, 20));
   itxt2->enableInsertMode(false);
   itxt2->setText(")");
   iefPrefix->setLimit(3);
   iefPrefixNumOnlyKbdHandler = new NumOnlyKbdHandler();
   iefPrefixNumOnlyKbdHandler->handleEventsFor(iefPrefix);
   iefPrefix->setAlignment(IEntryField::center);
   iefPrefix->setMinimumSize(ISize(32, 20));
   itxt3->setLimit(1);
   itxt3->setAlignment(IEntryField::center);
   itxt3->setMinimumSize(ISize(15, 20));
   itxt3->enableInsertMode(false);
   itxt3->setText("-");
   iefPhNum->setLimit(4);
   iefPhNumNumOnlyKbdHandler = new NumOnlyKbdHandler();
   iefPhNumNumOnlyKbdHandler->handleEventsFor(iefPhNum);
   iefPhNum->setAlignment(IEntryField::center);
   iefPhNum->setMinimumSize(ISize(36, 20));
}     //end constructor


//------------------------------------------------------------------------------
// PhoneEntry :: ~PhoneEntry
//------------------------------------------------------------------------------
#pragma export (PhoneEntry::~PhoneEntry())
PhoneEntry::~PhoneEntry()
{
   this->stopHandlingNotificationsFor(*iphoneParser);
   conn0->stopHandlingNotificationsFor(*iphoneParser);
   conn0->stopHandlingNotificationsFor(*iefAC);
   conn1->stopHandlingNotificationsFor(*iphoneParser);
   conn1->stopHandlingNotificationsFor(*iefPrefix);
   conn2->stopHandlingNotificationsFor(*iphoneParser);
   conn2->stopHandlingNotificationsFor(*iefPhNum);

   delete conn0;
   delete conn1;
   delete conn2;

   iefACNumOnlyKbdHandler->stopHandlingEventsFor(iefAC);
   delete iefACNumOnlyKbdHandler;
   iefPrefixNumOnlyKbdHandler->stopHandlingEventsFor(iefPrefix);
   delete iefPrefixNumOnlyKbdHandler;
   iefPhNumNumOnlyKbdHandler->stopHandlingEventsFor(iefPhNum);
   delete iefPhNumNumOnlyKbdHandler;

   delete itxt1;
   delete iefAC;
   delete itxt2;
   delete iefPrefix;
   delete itxt3;
   delete iefPhNum;
   delete iphoneParser;
}

//------------------------------------------------------------------------------
// PhoneEntry :: initializePart
//------------------------------------------------------------------------------
#pragma export (PhoneEntry::initializePart())
PhoneEntry & PhoneEntry::initializePart()
{
   this->handleNotificationsFor(*iphoneParser);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// PhoneEntry :: makeConnections
//------------------------------------------------------------------------------
#pragma export (PhoneEntry::makeConnections())
Boolean PhoneEntry::makeConnections()
{
   this->enableNotification();
   itxt1->enableNotification();
   iefAC->enableNotification();
   itxt2->enableNotification();
   iefPrefix->enableNotification();
   itxt3->enableNotification();
   iefPhNum->enableNotification();
   iphoneParser->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(iphoneParser, iefAC);
   conn0->handleNotificationsFor(*iphoneParser);
   conn0->handleNotificationsFor(*iefAC);
   conn1->initialize(iphoneParser, iefPrefix);
   conn1->handleNotificationsFor(*iphoneParser);
   conn1->handleNotificationsFor(*iefPrefix);
   conn2->initialize(iphoneParser, iefPhNum);
   conn2->handleNotificationsFor(*iphoneParser);
   conn2->handleNotificationsFor(*iefPhNum);

   conn0->setTarget();
   conn1->setTarget();
   conn2->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// PhoneEntry :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (PhoneEntry::dispatchNotificationEvent(const INotificationEvent &))
IObserver & PhoneEntry::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == PhoneParser::phoneAsStringId) && (iphoneParser == &anEvent.notifier()))
       notifyObservers(INotificationEvent(phoneAsString, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}




