/*******************************************************************************
* FILE NAME: MyDate.cpp                                                        *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     MyDate- Displays today's date                                            *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _MYDATE_
#include "MyDate.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for MyDateConn0
//*****************************************************************************
class MyDateConn0 : public IObserver {
public:
   virtual  ~MyDateConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IDate * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : todaysDate(asString) to StaticText(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->asString());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IDate * source;
   IStaticText * target;
   Boolean aligning;


};   //MyDateConn0


#pragma export (MyDate::readyId)
const INotificationId MyDate::readyId = "MyDate::readyId";

#pragma export (MyDate::myDateToday)
const INotificationId MyDate::myDateToday = "MyDate::myDateToday";

//------------------------------------------------------------------------------
// MyDate :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (MyDate::defaultFramingSpec())
IRectangle MyDate::defaultFramingSpec()
{
   return(IRectangle(IPoint(30,452),ISize(52, 25)));
}


//------------------------------------------------------------------------------
// MyDate :: MyDate
//------------------------------------------------------------------------------
#pragma export (MyDate::MyDate(unsigned long, IWindow *, IWindow *, const IRectangle &, const IStaticText::Style &))
MyDate::MyDate(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const IStaticText::Style & style)
   : IStaticText(id, parent, owner, rect, style)
{
   itodaysDate = new IDate();

   conn0 = new MyDateConn0();

   this->setText("today");
}     //end constructor


//------------------------------------------------------------------------------
// MyDate :: ~MyDate
//------------------------------------------------------------------------------
#pragma export (MyDate::~MyDate())
MyDate::~MyDate()
{
   conn0->stopHandlingNotificationsFor(*this);

   delete conn0;


   delete itodaysDate;
}

//------------------------------------------------------------------------------
// MyDate :: initializePart
//------------------------------------------------------------------------------
#pragma export (MyDate::initializePart())
MyDate & MyDate::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// MyDate :: makeConnections
//------------------------------------------------------------------------------
#pragma export (MyDate::makeConnections())
Boolean MyDate::makeConnections()
{
   this->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(itodaysDate, this);
   conn0->handleNotificationsFor(*this);

   conn0->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// MyDate :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (MyDate::dispatchNotificationEvent(const INotificationEvent &))
IObserver & MyDate::dispatchNotificationEvent(const INotificationEvent & anEvent)
{

   return *this;
}



