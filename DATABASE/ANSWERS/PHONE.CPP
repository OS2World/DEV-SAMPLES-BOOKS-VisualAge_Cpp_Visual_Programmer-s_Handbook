/*******************************************************************************
* FILE NAME: phone.cpp                                                         *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     phone                                                                    *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _ICANVAS_
#include <icanvas.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IOUTLBOX_
#include <ioutlbox.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _KBDHDR_
#include "kbdhdr.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _PHONE_
#include "phone.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for phoneConn0
//*****************************************************************************
class phoneConn0 : public IObserver {
public:
   virtual  ~phoneConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(PhoneParser * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(areaCode) to efAC(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setAreaCode(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(areaCode) to efAC(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->areaCode());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == PhoneParser::areaCodeId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   PhoneParser * source;
   IEntryField * target;
   Boolean aligning;


};   //phoneConn0


//*****************************************************************************
// Class definition for phoneConn1
//*****************************************************************************
class phoneConn1 : public IObserver {
public:
   virtual  ~phoneConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(PhoneParser * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(prefix) to efPhZone(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setPrefix(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(prefix) to efPhZone(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->prefix());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == PhoneParser::prefixId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   PhoneParser * source;
   IEntryField * target;
   Boolean aligning;


};   //phoneConn1


//*****************************************************************************
// Class definition for phoneConn2
//*****************************************************************************
class phoneConn2 : public IObserver {
public:
   virtual  ~phoneConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(PhoneParser * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(number) to efPhNum(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setNumber(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : phoneParser(number) to efPhNum(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->number());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == PhoneParser::numberId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   PhoneParser * source;
   IEntryField * target;
   Boolean aligning;


};   //phoneConn2


#pragma export (phone::readyId)
const INotificationId phone::readyId = "phone::readyId";

#pragma export (phone::PhoneefACText)
const INotificationId phone::PhoneefACText = "phone::PhoneefACText";

#pragma export (phone::PhoneefPhZoneValueAsInt)
const INotificationId phone::PhoneefPhZoneValueAsInt = "phone::PhoneefPhZoneValueAsInt";

#pragma export (phone::PhoneefPhZoneText)
const INotificationId phone::PhoneefPhZoneText = "phone::PhoneefPhZoneText";

#pragma export (phone::PhoneefACValueAsInt)
const INotificationId phone::PhoneefACValueAsInt = "phone::PhoneefACValueAsInt";

#pragma export (phone::PhoneefPhNumText)
const INotificationId phone::PhoneefPhNumText = "phone::PhoneefPhNumText";

#pragma export (phone::PhoneefPhNumValueAsInt)
const INotificationId phone::PhoneefPhNumValueAsInt = "phone::PhoneefPhNumValueAsInt";

#pragma export (phone::phoneParserAsString)
const INotificationId phone::phoneParserAsString = "phone::phoneParserAsString";

#pragma export (phone::partWindowId)
unsigned long phone::partWindowId = 0;

//------------------------------------------------------------------------------
// phone :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (phone::defaultFramingSpec())
IRectangle phone::defaultFramingSpec()
{
   return(IRectangle(IPoint(39,237),ISize(132, 37)));
}


//------------------------------------------------------------------------------
// phone :: phone
//------------------------------------------------------------------------------
#pragma export (phone::phone(unsigned long, IWindow *, IWindow *, const IRectangle &, const ICanvas::Style &))
phone::phone(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const ICanvas::Style & style)
   : ICanvas((partWindowId) ? partWindowId : id, parent, owner, rect, style)
{
   partWindowId = (partWindowId) ? partWindowId : id;
   iOutlineBox2 = new IOutlineBox(
      partWindowId+WNDOFFSET_phone_OutlineBox2, 
      this, 
      this, 
      IRectangle(IPoint(5,4),ISize(125, 28)));
   iefPh1 = new IEntryField(
      partWindowId+WNDOFFSET_phone_efPh1, 
      this, 
      this, 
      IRectangle(IPoint(8,9),ISize(13, 20)), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::readOnly);
   iefAC = new IEntryField(
      partWindowId+WNDOFFSET_phone_efAC, 
      this, 
      this, 
      IRectangle(IPoint(16,9),ISize(32, 20)), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::autoTab | IControl::tabStop | IControl::group);
   iefPH2 = new IEntryField(
      partWindowId+WNDOFFSET_phone_efPH2, 
      this, 
      this, 
      IRectangle(IPoint(44,9),ISize(15, 20)), 
      IEntryField::defaultStyle() & ~IEntryField::margin & ~IControl::tabStop | IEntryField::readOnly);
   iefPhZone = new IEntryField(
      partWindowId+WNDOFFSET_phone_efPhZone, 
      this, 
      this, 
      IRectangle(IPoint(53,9),ISize(32, 20)), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::autoTab | IControl::tabStop);
   iefPH3 = new IEntryField(
      partWindowId+WNDOFFSET_phone_efPH3, 
      this, 
      this, 
      IRectangle(IPoint(80,9),ISize(15, 20)), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IEntryField::readOnly);
   iefPhNum = new IEntryField(
      partWindowId+WNDOFFSET_phone_efPhNum, 
      this, 
      this, 
      IRectangle(IPoint(91,9),ISize(36, 20)), 
      IEntryField::defaultStyle() & ~IEntryField::margin | IControl::tabStop);
   iphoneParser = new PhoneParser();

   conn0 = new phoneConn0();
   conn1 = new phoneConn1();
   conn2 = new phoneConn2();

   this->setMinimumSize(ISize(320, 240));
   iefPh1->setLimit(1);
   iefPh1->setText("(");
   iefPh1->setAlignment(IEntryField::center);
   iefPh1->enableInsertMode(false);
   iefAC->setLimit(3);
   iefAC->setAlignment(IEntryField::center);
   iefACNumOnlyKbdHandler = new NumOnlyKbdHandler();
   iefACNumOnlyKbdHandler->handleEventsFor(iefAC);
   iefPH2->setLimit(1);
   iefPH2->setText(")");
   iefPH2->setAlignment(IEntryField::center);
   iefPH2->enableInsertMode(false);
   iefPhZone->setLimit(3);
   iefPhZone->setAlignment(IEntryField::center);
   iefPhZoneNumOnlyKbdHandler = new NumOnlyKbdHandler();
   iefPhZoneNumOnlyKbdHandler->handleEventsFor(iefPhZone);
   iefPH3->setLimit(1);
   iefPH3->setText("-");
   iefPH3->setAlignment(IEntryField::center);
   iefPH3->enableInsertMode(false);
   iefPhNum->setLimit(4);
   iefPhNum->setAlignment(IEntryField::center);
   iefPhNumNumOnlyKbdHandler = new NumOnlyKbdHandler();
   iefPhNumNumOnlyKbdHandler->handleEventsFor(iefPhNum);
}     //end constructor


//------------------------------------------------------------------------------
// phone :: ~phone
//------------------------------------------------------------------------------
#pragma export (phone::~phone())
phone::~phone()
{
   this->stopHandlingNotificationsFor(*iefAC);
   this->stopHandlingNotificationsFor(*iefPhZone);
   this->stopHandlingNotificationsFor(*iefPhNum);
   this->stopHandlingNotificationsFor(*iphoneParser);
   conn0->stopHandlingNotificationsFor(*iphoneParser);
   conn0->stopHandlingNotificationsFor(*iefAC);
   conn1->stopHandlingNotificationsFor(*iphoneParser);
   conn1->stopHandlingNotificationsFor(*iefPhZone);
   conn2->stopHandlingNotificationsFor(*iphoneParser);
   conn2->stopHandlingNotificationsFor(*iefPhNum);

   delete conn0;
   delete conn1;
   delete conn2;

   iefACNumOnlyKbdHandler->stopHandlingEventsFor(iefAC);
   delete iefACNumOnlyKbdHandler;
   iefPhZoneNumOnlyKbdHandler->stopHandlingEventsFor(iefPhZone);
   delete iefPhZoneNumOnlyKbdHandler;
   iefPhNumNumOnlyKbdHandler->stopHandlingEventsFor(iefPhNum);
   delete iefPhNumNumOnlyKbdHandler;

   delete iOutlineBox2;
   delete iefPh1;
   delete iefAC;
   delete iefPH2;
   delete iefPhZone;
   delete iefPH3;
   delete iefPhNum;
   delete iphoneParser;
}

//------------------------------------------------------------------------------
// phone :: initializePart
//------------------------------------------------------------------------------
#pragma export (phone::initializePart())
phone & phone::initializePart()
{
   this->handleNotificationsFor(*iefAC);
   this->handleNotificationsFor(*iefPhZone);
   this->handleNotificationsFor(*iefPhNum);
   this->handleNotificationsFor(*iphoneParser);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// phone :: makeConnections
//------------------------------------------------------------------------------
#pragma export (phone::makeConnections())
Boolean phone::makeConnections()
{
   this->enableNotification();
   iOutlineBox2->enableNotification();
   iefPh1->enableNotification();
   iefAC->enableNotification();
   iefPH2->enableNotification();
   iefPhZone->enableNotification();
   iefPH3->enableNotification();
   iefPhNum->enableNotification();
   iphoneParser->enableNotification();

   conn0->initialize(iphoneParser, iefAC);
   conn0->handleNotificationsFor(*iphoneParser);
   conn0->handleNotificationsFor(*iefAC);
   conn1->initialize(iphoneParser, iefPhZone);
   conn1->handleNotificationsFor(*iphoneParser);
   conn1->handleNotificationsFor(*iefPhZone);
   conn2->initialize(iphoneParser, iefPhNum);
   conn2->handleNotificationsFor(*iphoneParser);
   conn2->handleNotificationsFor(*iefPhNum);

   conn0->setTarget();
   conn1->setTarget();
   conn2->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// phone :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (phone::dispatchNotificationEvent(const INotificationEvent &))
IObserver & phone::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == IEntryField::textId) && (iefAC == &anEvent.notifier()))
       notifyObservers(INotificationEvent(PhoneefACText, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IEntryField::textId) && (iefPhZone == &anEvent.notifier()))
       notifyObservers(INotificationEvent(PhoneefPhZoneValueAsInt, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IEntryField::textId) && (iefPhZone == &anEvent.notifier()))
       notifyObservers(INotificationEvent(PhoneefPhZoneText, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IEntryField::textId) && (iefAC == &anEvent.notifier()))
       notifyObservers(INotificationEvent(PhoneefACValueAsInt, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IEntryField::textId) && (iefPhNum == &anEvent.notifier()))
       notifyObservers(INotificationEvent(PhoneefPhNumText, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == IEntryField::textId) && (iefPhNum == &anEvent.notifier()))
       notifyObservers(INotificationEvent(PhoneefPhNumValueAsInt, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == PhoneParser::asStringId) && (iphoneParser == &anEvent.notifier()))
       notifyObservers(INotificationEvent(phoneParserAsString, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}






