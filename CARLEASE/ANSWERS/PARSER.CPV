

// Feature source code generation begins here...
INotificationId LeaseFileParser::leaseStartDateId = "LeaseFileParser::leaseStartDate";
INotificationId LeaseFileParser::carModelId = "LeaseFileParser::carModel";
INotificationId LeaseFileParser::custNameId = "LeaseFileParser::custName";
INotificationId LeaseFileParser::extraCostId = "LeaseFileParser::extraCost";
INotificationId LeaseFileParser::freeDistancePerYearId = "LeaseFileParser::freeDistancePerYear";
INotificationId LeaseFileParser::lineAddedToCollectionId = "LeaseFileParser::lineAddedToCollection";
INotificationId LeaseFileParser::lineParsedId = "LeaseFileParser::lineParsed";
INotificationId LeaseFileParser::inputLineId = "LeaseFileParser::inputLine";

IDate LeaseFileParser::leaseStartDate() const
{
  return iLeaseStartDate;
}

LeaseFileParser& LeaseFileParser::setLeaseStartDate(const IDate& aLeaseStartDate)
{
  if (!(iLeaseStartDate == aLeaseStartDate))
  {
    iLeaseStartDate = aLeaseStartDate;
    notifyObservers(INotificationEvent(LeaseFileParser::leaseStartDateId, *this));
  } // endif
  return *this;
}

IString LeaseFileParser::carModel() const
{
  return iCarModel;
}

LeaseFileParser& LeaseFileParser::setCarModel(const IString& aCarModel)
{
  if (!(iCarModel == aCarModel))
  {
    iCarModel = aCarModel;
    notifyObservers(INotificationEvent(LeaseFileParser::carModelId, *this));
  } // endif
  return *this;
}

IString LeaseFileParser::custName() const
{
  return iCustName;
}

LeaseFileParser& LeaseFileParser::setCustName(const IString& aCustName)
{
  if (!(iCustName == aCustName))
  {
    iCustName = aCustName;
    notifyObservers(INotificationEvent(LeaseFileParser::custNameId, *this));
  } // endif
  return *this;
}

int LeaseFileParser::extraCost() const
{
  return iExtraCost;
}

LeaseFileParser& LeaseFileParser::setExtraCost(int aExtraCost)
{
  if (!(iExtraCost == aExtraCost))
  {
    iExtraCost = aExtraCost;
    notifyObservers(INotificationEvent(LeaseFileParser::extraCostId, *this));
  } // endif
  return *this;
}

int LeaseFileParser::freeDistancePerYear() const
{
  return iFreeDistancePerYear;
}

LeaseFileParser& LeaseFileParser::setFreeDistancePerYear(int aFreeDistancePerYear)
{
  if (!(iFreeDistancePerYear == aFreeDistancePerYear))
  {
    iFreeDistancePerYear = aFreeDistancePerYear;
    notifyObservers(INotificationEvent(LeaseFileParser::freeDistancePerYearId, *this));
  } // endif
  return *this;
}

LeaseFileParser& LeaseFileParser::elementAt(long position)
{
  try
  {
     strNewLine = strSequence.elementAtPosition( ++ position );
     parseLine();
  }
  catch( IException& exc )
  {
     strNewLine = "";
  }
  return *this;
}


IString LeaseFileParser::inputLine() const
{
  return iInputLine;
}

LeaseFileParser& LeaseFileParser::setInputLine(const IString& aInputLine)
{
  strNewLine = aInputLine;
  if( strNewLine.strip().length() > 0 )
  {
     if( strNewLine[1] != '#' )
     {
        addToCollection();
        parseLine();
        notifyObservers(INotificationEvent(LeaseFileParser::lineAddedToCollectionId, *this));
     } /* endif */
  } /* endif */
  notifyObservers(INotificationEvent(LeaseFileParser::inputLineId, *this));
  return *this;
}

// Feature source code generation ends here.
// Not generated by the Visual Builder

LeaseFileParser& LeaseFileParser::addToCollection()
{
  strSequence.addAsLast( strNewLine );
  return *this;
}

LeaseFileParser& LeaseFileParser::parseLine( )
{
  IString custName, carModel, startDate, distPerYear, extraCost;
  strNewLine >> custName >> "," >> carModel>> "," >> startDate >> "," >> distPerYear >> "," >> extraCost;
  setCustName( custName );
  setCarModel( carModel );
  setFreeDistancePerYear( distPerYear.asInt() );
  setExtraCost( extraCost.asInt() );

  IString month, day, year;
  startDate >> month >> "-" >> day >> "-" >> year;
  IDate startDateAsIDate( IDate::Month( month.asInt() ),
                          day.asInt(),  
                          year.asInt() );

  setLeaseStartDate( startDateAsIDate );

  notifyObservers(INotificationEvent(LeaseFileParser::lineParsedId, *this));

  return *this;
}
