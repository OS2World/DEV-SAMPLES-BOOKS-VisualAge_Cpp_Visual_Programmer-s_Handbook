/*******************************************************************************
* FILE NAME: CstmrCnv.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     CustomerCanvas- Customer details canvas for lease application            *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _KBDHDR_
#include "kbdhdr.hpp"
#endif

#ifndef _IVBFLY_
#include <ivbfly.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _CUSTOMERCANVAS_
#include "CstmrCnv.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for CustomerCanvasConn14
//*****************************************************************************
class CustomerCanvasConn14 : public IObserver, public IStandardNotifier {
public:
   virtual  ~CustomerCanvasConn14(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(CustomerCanvas * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == CustomerCanvas::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to efOdometer(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   CustomerCanvas * source;
   IEntryField * target;


};   //CustomerCanvasConn14


//*****************************************************************************
// Class definition for CustomerCanvasConn1
//*****************************************************************************
class CustomerCanvasConn1 : public IObserver {
public:
   virtual  ~CustomerCanvasConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(todayAsString) to today(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->gettoday()->asString());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::todayAsString) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn1


//*****************************************************************************
// Class definition for CustomerCanvasConn2
//*****************************************************************************
class CustomerCanvasConn2 : public IObserver {
public:
   virtual  ~CustomerCanvasConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(customerName) to custName(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaParser()->setCustName(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(customerName) to custName(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->getaParser()->custName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::customerName) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn2


//*****************************************************************************
// Class definition for CustomerCanvasConn3
//*****************************************************************************
class CustomerCanvasConn3 : public IObserver {
public:
   virtual  ~CustomerCanvasConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(carModel) to carModel(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaParser()->setCarModel(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(carModel) to carModel(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->getaParser()->carModel());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::carModel) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn3


//*****************************************************************************
// Class definition for CustomerCanvasConn4
//*****************************************************************************
class CustomerCanvasConn4 : public IObserver {
public:
   virtual  ~CustomerCanvasConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(LeaseStartDateAsString) to leaseStart(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setLeaseStartDateAsString(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(LeaseStartDateAsString) to leaseStart(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->LeaseStartDateAsString());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::LeaseStartDateAsStringId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn4


//*****************************************************************************
// Class definition for CustomerCanvasConn5
//*****************************************************************************
class CustomerCanvasConn5 : public IObserver {
public:
   virtual  ~CustomerCanvasConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(freeDistancePerYear) to distancePerYear(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaParser()->setFreeDistancePerYear(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(freeDistancePerYear) to distancePerYear(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->getaParser()->freeDistancePerYear());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::freeDistancePerYear) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn5


//*****************************************************************************
// Class definition for CustomerCanvasConn6
//*****************************************************************************
class CustomerCanvasConn6 : public IObserver {
public:
   virtual  ~CustomerCanvasConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(freeDistanceToDate) to distanceToDate(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->getaLeaseCalc()->freeDistanceToDate());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::freeDistanceToDate) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn6


//*****************************************************************************
// Class definition for CustomerCanvasConn7
//*****************************************************************************
class CustomerCanvasConn7 : public IObserver {
public:
   virtual  ~CustomerCanvasConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(odometerReading) to efOdometer(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaLeaseCalc()->setOdometerReading(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(odometerReading) to efOdometer(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->getaLeaseCalc()->odometerReading());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::odometerReading) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IEntryField * target;
   Boolean aligning;


};   //CustomerCanvasConn7


//*****************************************************************************
// Class definition for CustomerCanvasConn8
//*****************************************************************************
class CustomerCanvasConn8 : public IObserver {
public:
   virtual  ~CustomerCanvasConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(difference) to difference(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->getaLeaseCalc()->difference());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::difference) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn8


//*****************************************************************************
// Class definition for CustomerCanvasConn9
//*****************************************************************************
class CustomerCanvasConn9 : public IObserver {
public:
   virtual  ~CustomerCanvasConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(extraCost) to extraCost(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaParser()->setExtraCost(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(extraCost) to extraCost(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->getaParser()->extraCost());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::extraCost) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn9


//*****************************************************************************
// Class definition for CustomerCanvasConn10
//*****************************************************************************
class CustomerCanvasConn10 : public IObserver {
public:
   virtual  ~CustomerCanvasConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(amountOwed) to amountOwed(text))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setAmountOwed(target->text());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(amountOwed) to amountOwed(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->amountOwed());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::amountOwedId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn10


//*****************************************************************************
// Class definition for CustomerCanvasConn11
//*****************************************************************************
class CustomerCanvasConn11 : public IObserver {
public:
   virtual  ~CustomerCanvasConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(differenceColor) to difference(foregroundColor))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaLeaseCalc()->setDifferenceColor(target->foregroundColor());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(differenceColor) to difference(foregroundColor))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setForegroundColor(source->getaLeaseCalc()->differenceColor());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::differenceColor) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::foregroundColorId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn11


//*****************************************************************************
// Class definition for CustomerCanvasConn12
//*****************************************************************************
class CustomerCanvasConn12 : public IObserver {
public:
   virtual  ~CustomerCanvasConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, IStaticText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(differenceColor) to amountOwed(foregroundColor))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->getaLeaseCalc()->setDifferenceColor(target->foregroundColor());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseInfo(differenceColor) to amountOwed(foregroundColor))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setForegroundColor(source->getaLeaseCalc()->differenceColor());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::differenceColor) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IStaticText::foregroundColorId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   IStaticText * target;
   Boolean aligning;


};   //CustomerCanvasConn12


#pragma export (CustomerCanvas::readyId)
const INotificationId CustomerCanvas::readyId = "CustomerCanvas::readyId";

#pragma export (CustomerCanvas::leaseFileParser)
const INotificationId CustomerCanvas::leaseFileParser = "CustomerCanvas::leaseFileParser";

//------------------------------------------------------------------------------
// CustomerCanvas :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (CustomerCanvas::defaultFramingSpec())
IRectangle CustomerCanvas::defaultFramingSpec()
{
   return(IRectangle(IPoint(30,124),ISize(383, 368)));
}


//------------------------------------------------------------------------------
// CustomerCanvas :: CustomerCanvas
//------------------------------------------------------------------------------
#pragma export (CustomerCanvas::CustomerCanvas(unsigned long, IWindow *, IWindow *, const IRectangle &, const IMultiCellCanvas::Style &))
CustomerCanvas::CustomerCanvas(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const IMultiCellCanvas::Style & style)
   : IMultiCellCanvas(id, parent, owner, rect, style)
{
   itxtToday = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday, 
      this, 
      this, 
      IRectangle());
   itxtToday1 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday1, 
      this, 
      this, 
      IRectangle());
   itxtToday11 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday11, 
      this, 
      this, 
      IRectangle());
   itxtToday111 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday111, 
      this, 
      this, 
      IRectangle());
   itxtToday1111 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday1111, 
      this, 
      this, 
      IRectangle());
   itxtToday11111 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday11111, 
      this, 
      this, 
      IRectangle());
   itxtToday111111 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday111111, 
      this, 
      this, 
      IRectangle());
   itxtToday1111111 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday1111111, 
      this, 
      this, 
      IRectangle());
   itxtToday1111112 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday1111112, 
      this, 
      this, 
      IRectangle());
   itxtToday11111121 = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_txtToday11111121, 
      this, 
      this, 
      IRectangle());
   icustName = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_custName, 
      this, 
      this, 
      IRectangle());
   icarModel = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_carModel, 
      this, 
      this, 
      IRectangle());
   ileaseStart = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_leaseStart, 
      this, 
      this, 
      IRectangle());
   idistancePerYear = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_distancePerYear, 
      this, 
      this, 
      IRectangle());
   idistanceToDate = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_distanceToDate, 
      this, 
      this, 
      IRectangle());
   idifference = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_difference, 
      this, 
      this, 
      IRectangle());
   iextraCost = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_extraCost, 
      this, 
      this, 
      IRectangle());
   iamountOwed = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_amountOwed, 
      this, 
      this, 
      IRectangle());
   iefOdometer = new IEntryField(
      id+WNDOFFSET_CustomerCanvas_efOdometer, 
      this, 
      this, 
      IRectangle());
   itoday = new IStaticText(
      id+WNDOFFSET_CustomerCanvas_today, 
      this, 
      this, 
      IRectangle());
   iVBFlyText1 = new IVBFlyText(this);
   ileaseInfo = new FileParserCalc();

   conn14 = new CustomerCanvasConn14();
   conn1 = new CustomerCanvasConn1();
   conn2 = new CustomerCanvasConn2();
   conn3 = new CustomerCanvasConn3();
   conn4 = new CustomerCanvasConn4();
   conn5 = new CustomerCanvasConn5();
   conn6 = new CustomerCanvasConn6();
   conn7 = new CustomerCanvasConn7();
   conn8 = new CustomerCanvasConn8();
   conn9 = new CustomerCanvasConn9();
   conn10 = new CustomerCanvasConn10();
   conn11 = new CustomerCanvasConn11();
   conn12 = new CustomerCanvasConn12();

   this->addToCell(itxtToday, 2, 2, 1, 1);
   this->addToCell(itxtToday1, 2, 4, 1, 1);
   this->addToCell(itxtToday11, 2, 6, 1, 1);
   this->addToCell(itxtToday111, 2, 8, 1, 1);
   this->addToCell(itxtToday1111, 2, 10, 1, 1);
   this->addToCell(itxtToday11111, 2, 12, 1, 1);
   this->addToCell(itxtToday111111, 2, 14, 1, 1);
   this->addToCell(itxtToday1111111, 2, 16, 1, 1);
   this->addToCell(itxtToday1111112, 2, 18, 1, 1);
   this->addToCell(itxtToday11111121, 2, 20, 1, 1);
   this->addToCell(icustName, 4, 4, 2, 1);
   this->addToCell(icarModel, 4, 6, 2, 1);
   this->addToCell(ileaseStart, 4, 8, 2, 1);
   this->addToCell(idistancePerYear, 4, 10, 2, 1);
   this->addToCell(idistanceToDate, 4, 12, 2, 1);
   this->addToCell(idifference, 4, 16, 2, 1);
   this->addToCell(iextraCost, 4, 18, 2, 1);
   this->addToCell(iamountOwed, 4, 20, 2, 1);
   this->addToCell(iefOdometer, 4, 14, 1, 1);
   this->addToCell(itoday, 4, 2, 1, 1);
   this->setColumnWidth(1, IMultiCellCanvas::defaultCell().width(), true);
   this->setColumnWidth(6, IMultiCellCanvas::defaultCell().width(), true);
   this->setRowHeight(1, IMultiCellCanvas::defaultCell().height(), true);
   this->setRowHeight(21, IMultiCellCanvas::defaultCell().height(), true);
   itxtToday->setAlignment(IStaticText::topRight);
   itxtToday->setText("Today's date:");
   itxtToday1->setAlignment(IStaticText::topRight);
   itxtToday1->setText("Customer name:");
   itxtToday11->setAlignment(IStaticText::topRight);
   itxtToday11->setText("Car model:");
   itxtToday111->setAlignment(IStaticText::topRight);
   itxtToday111->setText("Lease started:");
   itxtToday1111->setAlignment(IStaticText::topRight);
   itxtToday1111->setText("Allotment per year:");
   itxtToday11111->setAlignment(IStaticText::topRight);
   itxtToday11111->setText("Allotment to-date:");
   itxtToday111111->setAlignment(IStaticText::topRight);
   itxtToday111111->setText("Odometer reading:");
   itxtToday1111111->setAlignment(IStaticText::topRight);
   itxtToday1111111->setText("Difference:");
   itxtToday1111112->setAlignment(IStaticText::topRight);
   itxtToday1111112->setText("Rate for extra usage:");
   itxtToday11111121->setAlignment(IStaticText::topRight);
   itxtToday11111121->setText("Amount for extra usage:");
   icustName->setText("custName");
   icarModel->setText("carModel");
   ileaseStart->setText("leaseStart");
   idistancePerYear->setText("distancePerYear");
   idistanceToDate->setText("distanceToDate");
   idifference->setText("difference");
   iextraCost->setText("extraCost");
   iamountOwed->setText("amountOwed");
   iefOdometer->setLimit(6);
   iefOdometerPosNumOnlyKbdHandler = new PosNumOnlyKbdHandler();
   iefOdometerPosNumOnlyKbdHandler->handleEventsFor(iefOdometer);
   itoday->setText("today");
}     //end constructor


//------------------------------------------------------------------------------
// CustomerCanvas :: ~CustomerCanvas
//------------------------------------------------------------------------------
#pragma export (CustomerCanvas::~CustomerCanvas())
CustomerCanvas::~CustomerCanvas()
{
   this->stopHandlingNotificationsFor(*ileaseInfo);
   conn14->stopHandlingNotificationsFor(*this);
   conn1->stopHandlingNotificationsFor(*ileaseInfo);
   conn1->stopHandlingNotificationsFor(*itoday);
   conn2->stopHandlingNotificationsFor(*ileaseInfo);
   conn2->stopHandlingNotificationsFor(*icustName);
   conn3->stopHandlingNotificationsFor(*ileaseInfo);
   conn3->stopHandlingNotificationsFor(*icarModel);
   conn4->stopHandlingNotificationsFor(*ileaseInfo);
   conn4->stopHandlingNotificationsFor(*ileaseStart);
   conn5->stopHandlingNotificationsFor(*ileaseInfo);
   conn5->stopHandlingNotificationsFor(*idistancePerYear);
   conn6->stopHandlingNotificationsFor(*ileaseInfo);
   conn6->stopHandlingNotificationsFor(*idistanceToDate);
   conn7->stopHandlingNotificationsFor(*ileaseInfo);
   conn7->stopHandlingNotificationsFor(*iefOdometer);
   conn8->stopHandlingNotificationsFor(*ileaseInfo);
   conn8->stopHandlingNotificationsFor(*idifference);
   conn9->stopHandlingNotificationsFor(*ileaseInfo);
   conn9->stopHandlingNotificationsFor(*iextraCost);
   conn10->stopHandlingNotificationsFor(*ileaseInfo);
   conn10->stopHandlingNotificationsFor(*iamountOwed);
   conn11->stopHandlingNotificationsFor(*ileaseInfo);
   conn11->stopHandlingNotificationsFor(*idifference);
   conn12->stopHandlingNotificationsFor(*ileaseInfo);
   conn12->stopHandlingNotificationsFor(*iamountOwed);

   delete conn14;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;
   delete conn5;
   delete conn6;
   delete conn7;
   delete conn8;
   delete conn9;
   delete conn10;
   delete conn11;
   delete conn12;

   iefOdometerPosNumOnlyKbdHandler->stopHandlingEventsFor(iefOdometer);
   delete iefOdometerPosNumOnlyKbdHandler;

   delete itxtToday;
   delete itxtToday1;
   delete itxtToday11;
   delete itxtToday111;
   delete itxtToday1111;
   delete itxtToday11111;
   delete itxtToday111111;
   delete itxtToday1111111;
   delete itxtToday1111112;
   delete itxtToday11111121;
   delete icustName;
   delete icarModel;
   delete ileaseStart;
   delete idistancePerYear;
   delete idistanceToDate;
   delete idifference;
   delete iextraCost;
   delete iamountOwed;
   delete iefOdometer;
   delete itoday;
   delete iVBFlyText1;
   delete ileaseInfo;
}

//------------------------------------------------------------------------------
// CustomerCanvas :: initializePart
//------------------------------------------------------------------------------
#pragma export (CustomerCanvas::initializePart())
CustomerCanvas & CustomerCanvas::initializePart()
{
   this->handleNotificationsFor(*ileaseInfo);
   ileaseInfo->initializePart();
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// CustomerCanvas :: makeConnections
//------------------------------------------------------------------------------
#pragma export (CustomerCanvas::makeConnections())
Boolean CustomerCanvas::makeConnections()
{
   this->enableNotification();
   itxtToday->enableNotification();
   itxtToday1->enableNotification();
   itxtToday11->enableNotification();
   itxtToday111->enableNotification();
   itxtToday1111->enableNotification();
   itxtToday11111->enableNotification();
   itxtToday111111->enableNotification();
   itxtToday1111111->enableNotification();
   itxtToday1111112->enableNotification();
   itxtToday11111121->enableNotification();
   icustName->enableNotification();
   icarModel->enableNotification();
   ileaseStart->enableNotification();
   idistancePerYear->enableNotification();
   idistanceToDate->enableNotification();
   idifference->enableNotification();
   iextraCost->enableNotification();
   iamountOwed->enableNotification();
   iefOdometer->enableNotification();
   itoday->enableNotification();
   iVBFlyText1->enableNotification();
   ileaseInfo->enableNotification();

   unsigned long id = this->id();
   conn14->initialize(this, iefOdometer);
   conn14->handleNotificationsFor(*this);
   conn1->initialize(ileaseInfo, itoday);
   conn1->handleNotificationsFor(*ileaseInfo);
   conn1->handleNotificationsFor(*itoday);
   conn2->initialize(ileaseInfo, icustName);
   conn2->handleNotificationsFor(*ileaseInfo);
   conn2->handleNotificationsFor(*icustName);
   conn3->initialize(ileaseInfo, icarModel);
   conn3->handleNotificationsFor(*ileaseInfo);
   conn3->handleNotificationsFor(*icarModel);
   conn4->initialize(ileaseInfo, ileaseStart);
   conn4->handleNotificationsFor(*ileaseInfo);
   conn4->handleNotificationsFor(*ileaseStart);
   conn5->initialize(ileaseInfo, idistancePerYear);
   conn5->handleNotificationsFor(*ileaseInfo);
   conn5->handleNotificationsFor(*idistancePerYear);
   conn6->initialize(ileaseInfo, idistanceToDate);
   conn6->handleNotificationsFor(*ileaseInfo);
   conn6->handleNotificationsFor(*idistanceToDate);
   conn7->initialize(ileaseInfo, iefOdometer);
   conn7->handleNotificationsFor(*ileaseInfo);
   conn7->handleNotificationsFor(*iefOdometer);
   conn8->initialize(ileaseInfo, idifference);
   conn8->handleNotificationsFor(*ileaseInfo);
   conn8->handleNotificationsFor(*idifference);
   conn9->initialize(ileaseInfo, iextraCost);
   conn9->handleNotificationsFor(*ileaseInfo);
   conn9->handleNotificationsFor(*iextraCost);
   conn10->initialize(ileaseInfo, iamountOwed);
   conn10->handleNotificationsFor(*ileaseInfo);
   conn10->handleNotificationsFor(*iamountOwed);
   conn11->initialize(ileaseInfo, idifference);
   conn11->handleNotificationsFor(*ileaseInfo);
   conn11->handleNotificationsFor(*idifference);
   conn12->initialize(ileaseInfo, iamountOwed);
   conn12->handleNotificationsFor(*ileaseInfo);
   conn12->handleNotificationsFor(*iamountOwed);

   conn1->setTarget();
   conn2->setTarget();
   conn3->setTarget();
   conn4->setTarget();
   conn5->setTarget();
   conn6->setTarget();
   conn7->setTarget();
   conn8->setTarget();
   conn9->setTarget();
   conn10->setTarget();
   conn11->setTarget();
   conn12->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// CustomerCanvas :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (CustomerCanvas::dispatchNotificationEvent(const INotificationEvent &))
IObserver & CustomerCanvas::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == FileParserCalc::leaseFileParser) && (ileaseInfo == &anEvent.notifier()))
       notifyObservers(INotificationEvent(leaseFileParser, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   return *this;
}



