/*******************************************************************************
* FILE NAME: LaseCalc.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     LeaseCalc- Calculates the difference and amount owed on a lease          *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _LEASECALC_
#include "LaseCalc.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


#pragma export (LeaseCalc::readyId)
const INotificationId LeaseCalc::readyId = "LeaseCalc::readyId";

//------------------------------------------------------------------------------
// LeaseCalc :: LeaseCalc
//------------------------------------------------------------------------------
#pragma export (LeaseCalc::LeaseCalc())
LeaseCalc::LeaseCalc()
          : iDifferenceColor(IColor::darkGreen)
{

   iDifference=0;
}     //end constructor


//------------------------------------------------------------------------------
// LeaseCalc :: ~LeaseCalc
//------------------------------------------------------------------------------
#pragma export (LeaseCalc::~LeaseCalc())
LeaseCalc::~LeaseCalc()
{

}

//------------------------------------------------------------------------------
// LeaseCalc :: initializePart
//------------------------------------------------------------------------------
#pragma export (LeaseCalc::initializePart())
LeaseCalc & LeaseCalc::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// LeaseCalc :: makeConnections
//------------------------------------------------------------------------------
#pragma export (LeaseCalc::makeConnections())
Boolean LeaseCalc::makeConnections()
{
   this->enableNotification();

   return true;
}


#include "LaseCalc.cpv"
