/*******************************************************************************
* FILE NAME: FlPrsrCl.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     FileParserCalc- Composite nonvisual part for lease application           *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IDATE_
#include <idate.hpp>
#endif

#ifndef _ISTRING_
#include <istring.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _FILEPARSERCALC_
#include "FlPrsrCl.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for FileParserCalcConn0
//*****************************************************************************
class FileParserCalcConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~FileParserCalcConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalc * aSource, FlatFile * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == FileParserCalc::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to aFile(open))");
         try {target->open();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalc * source;
   FlatFile * target;


};   //FileParserCalcConn0


//*****************************************************************************
// Class definition for FileParserCalcConn1
//*****************************************************************************
class FileParserCalcConn1 : public IObserver {
public:
   virtual  ~FileParserCalcConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FlatFile * aSource, LeaseFileParser * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aFile(currentLine) to aParser(inputLine))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setCurrentLine(target->inputLine());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aFile(currentLine) to aParser(inputLine))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setInputLine(source->currentLine());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FlatFile::currentLineId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == LeaseFileParser::inputLineId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FlatFile * source;
   LeaseFileParser * target;
   Boolean aligning;


};   //FileParserCalcConn1


//*****************************************************************************
// Class definition for FileParserCalcConn5
//*****************************************************************************
class FileParserCalcConn5 : public IObserver {
public:
   virtual  ~FileParserCalcConn5(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LeaseFileParser * aSource, LeaseCalc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(extraCost) to aLeaseCalc(extraCost))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setExtraCost(target->extraCost());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(extraCost) to aLeaseCalc(extraCost))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setExtraCost(source->extraCost());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LeaseFileParser::extraCostId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == LeaseCalc::extraCostId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LeaseFileParser * source;
   LeaseCalc * target;
   Boolean aligning;


};   //FileParserCalcConn5


//*****************************************************************************
// Class definition for FileParserCalcConn6
//*****************************************************************************
class FileParserCalcConn6 : public IObserver {
public:
   virtual  ~FileParserCalcConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LeaseFileParser * aSource, LeaseCalc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(freeDistancePerYear) to aLeaseCalc(freeDistancePerYear))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFreeDistancePerYear(target->freeDistancePerYear());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(freeDistancePerYear) to aLeaseCalc(freeDistancePerYear))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFreeDistancePerYear(source->freeDistancePerYear());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LeaseFileParser::freeDistancePerYearId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == LeaseCalc::freeDistancePerYearId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LeaseFileParser * source;
   LeaseCalc * target;
   Boolean aligning;


};   //FileParserCalcConn6


//*****************************************************************************
// Class definition for FileParserCalcConn7
//*****************************************************************************
class FileParserCalcConn7 : public IObserver {
public:
   virtual  ~FileParserCalcConn7(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LeaseFileParser * aSource, LeaseCalc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(leaseStartDate) to aLeaseCalc(leaseStartDate))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setLeaseStartDate(target->leaseStartDate());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(leaseStartDate) to aLeaseCalc(leaseStartDate))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLeaseStartDate(source->leaseStartDate());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LeaseFileParser::leaseStartDateId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == LeaseCalc::leaseStartDateId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LeaseFileParser * source;
   LeaseCalc * target;
   Boolean aligning;


};   //FileParserCalcConn7


//*****************************************************************************
// Class definition for FileParserCalcConn11
//*****************************************************************************
class FileParserCalcConn11 : public IObserver {
public:
   virtual  ~FileParserCalcConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LeaseFileParser * aSource, IVBVariableClass<IDate> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(leaseStartDate) to leaseStartDate of aParser(this))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setLeaseStartDate(target->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(leaseStartDate) to leaseStartDate of aParser(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->leaseStartDate());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LeaseFileParser::leaseStartDateId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariableClass<IDate>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LeaseFileParser * source;
   IVBVariableClass<IDate> * target;
   Boolean aligning;


};   //FileParserCalcConn11


//*****************************************************************************
// Class definition for FileParserCalcConn3
//*****************************************************************************
class FileParserCalcConn3 : public IObserver, public IStandardNotifier {
public:
   virtual  ~FileParserCalcConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LeaseCalc * aSource, LeaseCalc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   IString actionResult() const { return iActionResult; };
   FileParserCalcConn3 & setActionResult(IString aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == LeaseCalc::differenceId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aLeaseCalc(difference) to aLeaseCalc(calculateAmountOwing))");
         try {setActionResult(target->calculateAmountOwing());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LeaseCalc * source;
   LeaseCalc * target;
   IString iActionResult;


};   //FileParserCalcConn3

const INotificationId FileParserCalcConn3::actionResultId = "FileParserCalcConn3::actionResult";

//*****************************************************************************
// Class definition for FileParserCalcConn4
//*****************************************************************************
class FileParserCalcConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~FileParserCalcConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FileParserCalcConn3 * aSource, FileParserCalc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn3(actionResult) to (amountOwed))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setAmountOwed(source->actionResult());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalcConn3::actionResultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == FileParserCalc::amountOwedId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FileParserCalcConn3 * source;
   FileParserCalc * target;
   Boolean aligning;


};   //FileParserCalcConn4


//*****************************************************************************
// Class definition for FileParserCalcConn10
//*****************************************************************************
class FileParserCalcConn10 : public IObserver {
public:
   virtual  ~FileParserCalcConn10(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBVariableClass<IDate> * aSource, FileParserCalc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : leaseStartDate of aParser(asString) to (LeaseStartDateAsString))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLeaseStartDateAsString(source->target().asString());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FileParserCalc::LeaseStartDateAsStringId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBVariableClass<IDate> * source;
   FileParserCalc * target;
   Boolean aligning;


};   //FileParserCalcConn10


//*****************************************************************************
// Class definition for FileParserCalcConn8
//*****************************************************************************
class FileParserCalcConn8 : public IObserver {
public:
   virtual  ~FileParserCalcConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IDate * aSource, LeaseCalc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : today(today) to aLeaseCalc(today))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setToday(source->today());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == LeaseCalc::todayId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IDate * source;
   LeaseCalc * target;
   Boolean aligning;


};   //FileParserCalcConn8


//*****************************************************************************
// Class definition for FileParserCalcConn2
//*****************************************************************************
class FileParserCalcConn2 : public IObserver, public IStandardNotifier {
public:
   virtual  ~FileParserCalcConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(LeaseFileParser * aSource, LeaseCalc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == LeaseFileParser::lineParsedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : aParser(lineParsed) to aLeaseCalc(odometerReading))");
         try {target->setOdometerReading(0);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   LeaseFileParser * source;
   LeaseCalc * target;


};   //FileParserCalcConn2


#pragma export (FileParserCalc::readyId)
const INotificationId FileParserCalc::readyId = "FileParserCalc::readyId";

#pragma export (FileParserCalc::carModel)
const INotificationId FileParserCalc::carModel = "FileParserCalc::carModel";

#pragma export (FileParserCalc::customerName)
const INotificationId FileParserCalc::customerName = "FileParserCalc::customerName";

#pragma export (FileParserCalc::extraCost)
const INotificationId FileParserCalc::extraCost = "FileParserCalc::extraCost";

#pragma export (FileParserCalc::freeDistancePerYear)
const INotificationId FileParserCalc::freeDistancePerYear = "FileParserCalc::freeDistancePerYear";

#pragma export (FileParserCalc::leaseFileParser)
const INotificationId FileParserCalc::leaseFileParser = "FileParserCalc::leaseFileParser";

#pragma export (FileParserCalc::freeDistanceToDate)
const INotificationId FileParserCalc::freeDistanceToDate = "FileParserCalc::freeDistanceToDate";

#pragma export (FileParserCalc::odometerReading)
const INotificationId FileParserCalc::odometerReading = "FileParserCalc::odometerReading";

#pragma export (FileParserCalc::difference)
const INotificationId FileParserCalc::difference = "FileParserCalc::difference";

#pragma export (FileParserCalc::differenceColor)
const INotificationId FileParserCalc::differenceColor = "FileParserCalc::differenceColor";

#pragma export (FileParserCalc::todayAsString)
const INotificationId FileParserCalc::todayAsString = "FileParserCalc::todayAsString";

//------------------------------------------------------------------------------
// FileParserCalc :: FileParserCalc
//------------------------------------------------------------------------------
#pragma export (FileParserCalc::FileParserCalc())
FileParserCalc::FileParserCalc()
{
   iaFile = new FlatFile();
   iaParser = new LeaseFileParser();
   iaLeaseCalc = new LeaseCalc();
   itoday = new IDate();
   ileaseStartDateofaParser = new IVBVariableClass<IDate>();

   conn0 = new FileParserCalcConn0();
   conn1 = new FileParserCalcConn1();
   conn5 = new FileParserCalcConn5();
   conn6 = new FileParserCalcConn6();
   conn7 = new FileParserCalcConn7();
   conn11 = new FileParserCalcConn11();
   conn3 = new FileParserCalcConn3();
   conn4 = new FileParserCalcConn4();
   conn10 = new FileParserCalcConn10();
   conn8 = new FileParserCalcConn8();
   conn2 = new FileParserCalcConn2();

   iaFile->setFileName("customer.dat");
   iaLeaseCalc->setOdometerReading(0);
}     //end constructor


//------------------------------------------------------------------------------
// FileParserCalc :: ~FileParserCalc
//------------------------------------------------------------------------------
#pragma export (FileParserCalc::~FileParserCalc())
FileParserCalc::~FileParserCalc()
{
   this->stopHandlingNotificationsFor(*iaParser);
   this->stopHandlingNotificationsFor(*iaLeaseCalc);
   conn0->stopHandlingNotificationsFor(*this);
   conn1->stopHandlingNotificationsFor(*iaFile);
   conn1->stopHandlingNotificationsFor(*iaParser);
   conn5->stopHandlingNotificationsFor(*iaParser);
   conn5->stopHandlingNotificationsFor(*iaLeaseCalc);
   conn6->stopHandlingNotificationsFor(*iaParser);
   conn6->stopHandlingNotificationsFor(*iaLeaseCalc);
   conn7->stopHandlingNotificationsFor(*iaParser);
   conn7->stopHandlingNotificationsFor(*iaLeaseCalc);
   conn11->stopHandlingNotificationsFor(*iaParser);
   conn11->stopHandlingNotificationsFor(*ileaseStartDateofaParser);
   conn3->stopHandlingNotificationsFor(*iaLeaseCalc);
   conn4->stopHandlingNotificationsFor(*conn3);
   conn4->stopHandlingNotificationsFor(*this);
   conn10->stopHandlingNotificationsFor(*ileaseStartDateofaParser);
   conn10->stopHandlingNotificationsFor(*this);
   conn8->stopHandlingNotificationsFor(*iaLeaseCalc);
   conn2->stopHandlingNotificationsFor(*iaParser);

   delete conn0;
   delete conn1;
   delete conn5;
   delete conn6;
   delete conn7;
   delete conn11;
   delete conn3;
   delete conn4;
   delete conn10;
   delete conn8;
   delete conn2;


   delete iaFile;
   delete iaParser;
   delete iaLeaseCalc;
   delete itoday;
   delete ileaseStartDateofaParser;
}

//------------------------------------------------------------------------------
// FileParserCalc :: initializePart
//------------------------------------------------------------------------------
#pragma export (FileParserCalc::initializePart())
FileParserCalc & FileParserCalc::initializePart()
{
   this->handleNotificationsFor(*iaParser);
   this->handleNotificationsFor(*iaLeaseCalc);
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// FileParserCalc :: makeConnections
//------------------------------------------------------------------------------
#pragma export (FileParserCalc::makeConnections())
Boolean FileParserCalc::makeConnections()
{
   this->enableNotification();
   iaFile->enableNotification();
   iaParser->enableNotification();
   iaLeaseCalc->enableNotification();
   ileaseStartDateofaParser->enableNotification();

   conn0->initialize(this, iaFile);
   conn0->handleNotificationsFor(*this);
   conn1->initialize(iaFile, iaParser);
   conn1->handleNotificationsFor(*iaFile);
   conn1->handleNotificationsFor(*iaParser);
   conn5->initialize(iaParser, iaLeaseCalc);
   conn5->handleNotificationsFor(*iaParser);
   conn5->handleNotificationsFor(*iaLeaseCalc);
   conn6->initialize(iaParser, iaLeaseCalc);
   conn6->handleNotificationsFor(*iaParser);
   conn6->handleNotificationsFor(*iaLeaseCalc);
   conn7->initialize(iaParser, iaLeaseCalc);
   conn7->handleNotificationsFor(*iaParser);
   conn7->handleNotificationsFor(*iaLeaseCalc);
   conn11->initialize(iaParser, ileaseStartDateofaParser);
   conn11->handleNotificationsFor(*iaParser);
   conn11->handleNotificationsFor(*ileaseStartDateofaParser);
   conn3->initialize(iaLeaseCalc, iaLeaseCalc);
   conn3->handleNotificationsFor(*iaLeaseCalc);
   conn4->initialize(conn3, this);
   conn4->handleNotificationsFor(*conn3);
   conn4->handleNotificationsFor(*this);
   conn10->initialize(ileaseStartDateofaParser, this);
   conn10->handleNotificationsFor(*ileaseStartDateofaParser);
   conn10->handleNotificationsFor(*this);
   conn8->initialize(itoday, iaLeaseCalc);
   conn8->handleNotificationsFor(*iaLeaseCalc);
   conn2->initialize(iaParser, iaLeaseCalc);
   conn2->handleNotificationsFor(*iaParser);

   conn1->setTarget();
   conn5->setTarget();
   conn6->setTarget();
   conn7->setTarget();
   conn11->setTarget();
   conn10->setTarget();
   conn8->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// FileParserCalc :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (FileParserCalc::dispatchNotificationEvent(const INotificationEvent &))
IObserver & FileParserCalc::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   if ((anEvent.notificationId() == LeaseFileParser::carModelId) && (iaParser == &anEvent.notifier()))
       notifyObservers(INotificationEvent(carModel, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == LeaseFileParser::custNameId) && (iaParser == &anEvent.notifier()))
       notifyObservers(INotificationEvent(customerName, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == LeaseFileParser::extraCostId) && (iaParser == &anEvent.notifier()))
       notifyObservers(INotificationEvent(extraCost, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == LeaseFileParser::freeDistancePerYearId) && (iaParser == &anEvent.notifier()))
       notifyObservers(INotificationEvent(freeDistancePerYear, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));

   else
   if ((anEvent.notificationId() == LeaseCalc::freeDistanceToDateId) && (iaLeaseCalc == &anEvent.notifier()))
       notifyObservers(INotificationEvent(freeDistanceToDate, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == LeaseCalc::odometerReadingId) && (iaLeaseCalc == &anEvent.notifier()))
       notifyObservers(INotificationEvent(odometerReading, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == LeaseCalc::differenceId) && (iaLeaseCalc == &anEvent.notifier()))
       notifyObservers(INotificationEvent(difference, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));
   else
   if ((anEvent.notificationId() == LeaseCalc::differenceColorId) && (iaLeaseCalc == &anEvent.notifier()))
       notifyObservers(INotificationEvent(differenceColor, *this, anEvent.hasNotifierAttrChanged(), IEventData((void *)anEvent.eventData()), anEvent.observerData()));

   return *this;
}





#include "FlPrsrCl.cpv"
