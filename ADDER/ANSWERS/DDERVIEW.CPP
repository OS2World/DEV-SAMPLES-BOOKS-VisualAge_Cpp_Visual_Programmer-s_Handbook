/*******************************************************************************
* FILE NAME: dderView.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     AdderView- This is the view for the adding machine application           *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _ICANVAS_
#include <icanvas.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IENTRYFD_
#include <ientryfd.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _CALC_
#include "Calc.hpp"
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _ADDERVIEW_
#include "dderView.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for AdderViewConn0
//*****************************************************************************
class AdderViewConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~AdderViewConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : pbExit(buttonClickEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //AdderViewConn0


//*****************************************************************************
// Class definition for AdderViewConn1
//*****************************************************************************
class AdderViewConn1 : public IObserver {
public:
   virtual  ~AdderViewConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IEntryField * aSource, Calc * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : efNum1(valueAsInt) to calculator(num1))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->VBSETTEXTFROMVALUE(target->num1());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : efNum1(valueAsInt) to calculator(num1))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setNum1(source->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IEntryField::textId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == Calc::num1Id) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IEntryField * source;
   Calc * target;
   Boolean aligning;


};   //AdderViewConn1


//*****************************************************************************
// Class definition for AdderViewConn2
//*****************************************************************************
class AdderViewConn2 : public IObserver {
public:
   virtual  ~AdderViewConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Calc * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(num2) to efNum2(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setNum2(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(num2) to efNum2(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->num2());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Calc::num2Id) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Calc * source;
   IEntryField * target;
   Boolean aligning;


};   //AdderViewConn2


//*****************************************************************************
// Class definition for AdderViewConn3
//*****************************************************************************
class AdderViewConn3 : public IObserver {
public:
   virtual  ~AdderViewConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Calc * aSource, IEntryField * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(result) to efResult(valueAsInt))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setResult(target->VBINTVALUEFROMTEXT());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : calculator(result) to efResult(valueAsInt))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->VBSETTEXTFROMVALUE(source->result());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == Calc::resultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IEntryField::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Calc * source;
   IEntryField * target;
   Boolean aligning;


};   //AdderViewConn3


//*****************************************************************************
// Class definition for AdderViewConn4
//*****************************************************************************
class AdderViewConn4 : public IObserver, public IStandardNotifier {
public:
   virtual  ~AdderViewConn4(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, Calc * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : pbAdd(buttonClickEvent) to calculator(add))");
         try {target->add();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   Calc * target;


};   //AdderViewConn4


#pragma export (AdderView::readyId)
const INotificationId AdderView::readyId = "AdderView::readyId";

//------------------------------------------------------------------------------
// AdderView :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (AdderView::defaultFramingSpec())
const IRectangle AdderView::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 384),ISize(512, 384)));
}


//------------------------------------------------------------------------------
// AdderView :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (AdderView::defaultTitle())
IString AdderView::defaultTitle()
{
   return("Adding Machine");
}


//------------------------------------------------------------------------------
// AdderView :: AdderView
//------------------------------------------------------------------------------
#pragma export (AdderView::AdderView(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
AdderView::AdderView(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iCanvas = new ICanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   itxtNum1 = new IStaticText(
      id+WNDOFFSET_AdderView_txtNum1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(98,286),ISize(108, 25)));
   itxtNum2 = new IStaticText(
      id+WNDOFFSET_AdderView_txtNum2, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(98,154),ISize(56, 25)));
   itxtResult = new IStaticText(
      id+WNDOFFSET_AdderView_txtResult, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(98,220),ISize(131, 25)));
   iefResult = new IEntryField(
      id+WNDOFFSET_AdderView_efResult, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(98,121),ISize(283, 25)), 
      IEntryField::defaultStyle() & ~IControl::tabStop | IEntryField::readOnly);
   iefNum1 = new IEntryField(
      id+WNDOFFSET_AdderView_efNum1, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(98,253),ISize(83, 25)), 
      IEntryField::defaultStyle() | IControl::group | IControl::tabStop);
   iefNum2 = new IEntryField(
      id+WNDOFFSET_AdderView_efNum2, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(98,187),ISize(83, 25)), 
      IEntryField::defaultStyle() | IControl::tabStop);
   ipbAdd = new IPushButton(
      id+WNDOFFSET_AdderView_pbAdd, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(130,33),ISize(56, 34)), 
      IPushButton::defaultStyle() | IPushButton::defaultButton | IControl::group | IControl::tabStop);
   ipbExit = new IPushButton(
      id+WNDOFFSET_AdderView_pbExit, 
      iCanvas, 
      iCanvas, 
      IRectangle(IPoint(316,33),ISize(56, 34)), 
      IPushButton::defaultStyle() | IControl::tabStop);
   icalculator = new Calc();

   conn0 = new AdderViewConn0();
   conn1 = new AdderViewConn1();
   conn2 = new AdderViewConn2();
   conn3 = new AdderViewConn3();
   conn4 = new AdderViewConn4();

   itxtNum1->setText("First Number");
   itxtNum2->setText("Result");
   itxtResult->setText("Second Number");
   iefNum1->setLimit(5);
   iefNum2->setLimit(5);
   ipbAdd->setText("A~dd");
   ipbExit->setText("E~xit");
   this->setFocus();
   this->setClient(iCanvas);
}     //end constructor


//------------------------------------------------------------------------------
// AdderView :: ~AdderView
//------------------------------------------------------------------------------
#pragma export (AdderView::~AdderView())
AdderView::~AdderView()
{
   conn0->stopHandlingNotificationsFor(*ipbExit);
   conn1->stopHandlingNotificationsFor(*iefNum1);
   conn1->stopHandlingNotificationsFor(*icalculator);
   conn2->stopHandlingNotificationsFor(*icalculator);
   conn2->stopHandlingNotificationsFor(*iefNum2);
   conn3->stopHandlingNotificationsFor(*icalculator);
   conn3->stopHandlingNotificationsFor(*iefResult);
   conn4->stopHandlingNotificationsFor(*ipbAdd);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn4;


   delete iCanvas;
   delete itxtNum1;
   delete itxtNum2;
   delete itxtResult;
   delete iefResult;
   delete iefNum1;
   delete iefNum2;
   delete ipbAdd;
   delete ipbExit;
   delete icalculator;
}

//------------------------------------------------------------------------------
// AdderView :: initializePart
//------------------------------------------------------------------------------
#pragma export (AdderView::initializePart())
AdderView & AdderView::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// AdderView :: makeConnections
//------------------------------------------------------------------------------
#pragma export (AdderView::makeConnections())
Boolean AdderView::makeConnections()
{
   this->enableNotification();
   iCanvas->enableNotification();
   itxtNum1->enableNotification();
   itxtNum2->enableNotification();
   itxtResult->enableNotification();
   iefResult->enableNotification();
   iefNum1->enableNotification();
   iefNum2->enableNotification();
   ipbAdd->enableNotification();
   ipbExit->enableNotification();
   icalculator->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(ipbExit, this);
   conn0->handleNotificationsFor(*ipbExit);
   conn1->initialize(iefNum1, icalculator);
   conn1->handleNotificationsFor(*iefNum1);
   conn1->handleNotificationsFor(*icalculator);
   conn2->initialize(icalculator, iefNum2);
   conn2->handleNotificationsFor(*icalculator);
   conn2->handleNotificationsFor(*iefNum2);
   conn3->initialize(icalculator, iefResult);
   conn3->handleNotificationsFor(*icalculator);
   conn3->handleNotificationsFor(*iefResult);
   conn4->initialize(ipbAdd, icalculator);
   conn4->handleNotificationsFor(*ipbAdd);

   conn1->setTarget();
   conn2->setTarget();
   conn3->setTarget();
   return true;
}



