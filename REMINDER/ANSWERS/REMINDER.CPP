/*******************************************************************************
* FILE NAME: Reminder.cpp                                                      *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     Reminder                                                                 *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMENUBAR_
#include <imenubar.hpp>
#endif

#ifndef _HELPHANDLER_
#include "helphdr.hpp"
#endif

#ifndef _IINFOA_
#include <iinfoa.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _ISETCV_
#include <isetcv.hpp>
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IRADIOBT_
#include <iradiobt.hpp>
#endif

#ifndef _IMLE_
#include <imle.hpp>
#endif

#ifndef _IPOPMENU_
#include <ipopmenu.hpp>
#endif

#ifndef _IVBMENUH_
#include <ivbmenuh.hpp>
#endif

#ifndef _IVBFLY_
#include <ivbfly.hpp>
#endif

#ifndef _IHELP_
#include <ihelp.hpp>
#endif

#ifndef _IRECT_
#include <irect.hpp>
#endif

#ifndef _IICONCTL_
#include <iiconctl.hpp>
#endif

#ifndef _IRESLIB_
#include <ireslib.hpp>
#endif

#ifndef _ISTATTXT_
#include <istattxt.hpp>
#endif

#ifndef _IPUSHBUT_
#include <ipushbut.hpp>
#endif

#ifndef _IPROFILE_
#include <iprofile.hpp>
#endif

#ifndef _RBMGR_
#include "RBMgr.hpp"
#endif

#ifndef _ISTRING_
#include <istring.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _REMINDER_
#include "Reminder.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for ReminderConn0
//*****************************************************************************
class ReminderConn0 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn0(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Reminder * aSource, IRadioButton * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Reminder::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to rbBirthdays(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Reminder * source;
   IRadioButton * target;


};   //ReminderConn0


//*****************************************************************************
// Class definition for ReminderConn1
//*****************************************************************************
class ReminderConn1 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn1(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn1(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPopUpMenu * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IMultiLineEdit::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miCut)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miCut(commandEvent) to mleReminder(cut))");
         try {target->cut();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPopUpMenu * source;
   IMultiLineEdit * target;
   unsigned long id;


};   //ReminderConn1


//*****************************************************************************
// Class definition for ReminderConn2
//*****************************************************************************
class ReminderConn2 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn2(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn2(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPopUpMenu * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IMultiLineEdit::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miCopy)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miCopy(commandEvent) to mleReminder(copy))");
         try {target->copy();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPopUpMenu * source;
   IMultiLineEdit * target;
   unsigned long id;


};   //ReminderConn2


//*****************************************************************************
// Class definition for ReminderConn3
//*****************************************************************************
class ReminderConn3 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn3(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn3(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPopUpMenu * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IMultiLineEdit::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miPaste)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miPaste(commandEvent) to mleReminder(paste))");
         try {target->paste();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPopUpMenu * source;
   IMultiLineEdit * target;
   unsigned long id;


};   //ReminderConn3


//*****************************************************************************
// Class definition for ReminderConn8
//*****************************************************************************
class ReminderConn8 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn8(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn8(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miClear)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miClear(commandEvent) to mleReminder(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IMultiLineEdit * target;
   unsigned long id;


};   //ReminderConn8


//*****************************************************************************
// Class definition for ReminderConn9
//*****************************************************************************
class ReminderConn9 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn9(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn9(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miExit)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miExit(commandEvent) to frmMainWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IFrameWindow * target;
   unsigned long id;


};   //ReminderConn9


//*****************************************************************************
// Class definition for ReminderConn11
//*****************************************************************************
class ReminderConn11 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn11(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn11(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miIndexHelp)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miIndexHelp(commandEvent) to helpWindow(showIndexHelp))");
         try {target->show(IHelpWindow::index);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //ReminderConn11


//*****************************************************************************
// Class definition for ReminderConn12
//*****************************************************************************
class ReminderConn12 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn12(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn12(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miGeneralHelp)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miGeneralHelp(commandEvent) to helpWindow(showGeneralHelp))");
         try {target->show(IHelpWindow::general);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //ReminderConn12


//*****************************************************************************
// Class definition for ReminderConn13
//*****************************************************************************
class ReminderConn13 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn13(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn13(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miUsingHelp)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miUsingHelp(commandEvent) to helpWindow(showUsingHelp))");
         try {target->show(IHelpWindow::using);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //ReminderConn13


//*****************************************************************************
// Class definition for ReminderConn14
//*****************************************************************************
class ReminderConn14 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn14(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn14(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IHelpWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miKeysHelp)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miKeysHelp(commandEvent) to helpWindow(showKeysHelp))");
         try {target->show(IHelpWindow::keys);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IHelpWindow * target;
   unsigned long id;


};   //ReminderConn14


//*****************************************************************************
// Class definition for ReminderConn15
//*****************************************************************************
class ReminderConn15 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn15(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Reminder * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Reminder::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to frmMainWindow(icon))");
         try {target->setIcon(IResourceId(7, IDynamicLinkLibrary("bitmaps")));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Reminder * source;
   IFrameWindow * target;


};   //ReminderConn15


//*****************************************************************************
// Class definition for ReminderConn16
//*****************************************************************************
class ReminderConn16 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Reminder * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   ReminderConn16 & setOwner(IFrameWindow * aSelf) {iOwner = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Reminder::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to frmProductInfo(owner))");
         try {target->setOwner(iOwner);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Reminder * source;
   IFrameWindow * target;
   IFrameWindow * iOwner;


};   //ReminderConn16


//*****************************************************************************
// Class definition for ReminderConn18
//*****************************************************************************
class ReminderConn18 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn18(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn18(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miProductInfo)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miProductInfo(commandEvent) to frmProductInfo(visible))");
         try {target->show();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IFrameWindow * target;
   unsigned long id;


};   //ReminderConn18


//*****************************************************************************
// Class definition for ReminderConn19
//*****************************************************************************
class ReminderConn19 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn19(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : pbOk(buttonClickEvent) to frmProductInfo(hide))");
         try {target->hide();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //ReminderConn19


//*****************************************************************************
// Class definition for ReminderConn20
//*****************************************************************************
class ReminderConn20 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   ReminderConn20(unsigned long tid) {id = tid;};

   virtual  ~ReminderConn20(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_Reminder_miProductInfo)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : miProductInfo(commandEvent) to frmProductInfo(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IFrameWindow * target;
   unsigned long id;


};   //ReminderConn20


//*****************************************************************************
// Class definition for ReminderConn21
//*****************************************************************************
class ReminderConn21 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn21(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IPushButton * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPushButton::buttonClickId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : pbOk(buttonClickEvent) to frmMainWindow(setFocus))");
         try {target->setFocus();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IPushButton * source;
   IFrameWindow * target;


};   //ReminderConn21


//*****************************************************************************
// Class definition for ReminderConn31
//*****************************************************************************
class ReminderConn31 : public IObserver {
public:
   virtual  ~ReminderConn31(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IInfoArea * aSource, IVBFlyText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InfoArea1(this) to flyOverHelp(longTextControl))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLongTextControl(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IInfoArea * source;
   IVBFlyText * target;
   Boolean aligning;


};   //ReminderConn31


//*****************************************************************************
// Class definition for ReminderConn22
//*****************************************************************************
class ReminderConn22 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn22(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Reminder * aSource, IProfile * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   IString actionResult() const { return iActionResult; };
   ReminderConn22 & setActionResult(IString aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Reminder::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to reminderData(elementWithKey))");
         try {setActionResult(target->elementWithKey("0"));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Reminder * source;
   IProfile * target;
   IString iActionResult;


};   //ReminderConn22

const INotificationId ReminderConn22::actionResultId = "ReminderConn22::actionResult";

//*****************************************************************************
// Class definition for ReminderConn23
//*****************************************************************************
class ReminderConn23 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn23(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ReminderConn22 * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn22(actionResult) to mleReminder(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->actionResult());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ReminderConn22::actionResultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IMultiLineEdit::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ReminderConn22 * source;
   IMultiLineEdit * target;
   Boolean aligning;


};   //ReminderConn23


//*****************************************************************************
// Class definition for ReminderConn24
//*****************************************************************************
class ReminderConn24 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn24(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(Reminder * aSource, RBMgr * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == Reminder::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to rbManager(startHandlingEvents))");
         try {target->startHandlingEvents();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   Reminder * source;
   RBMgr * target;


};   //ReminderConn24


//*****************************************************************************
// Class definition for ReminderConn25
//*****************************************************************************
class ReminderConn25 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn25(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(RBMgr * aSource, IProfile * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   ReminderConn25 & setKey(RBMgr * aSelf) {iKey = aSelf; return *this;};
   ReminderConn25 & setData(IMultiLineEdit * aSelf) {iData = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == RBMgr::previousButtonId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : rbManager(previousButton) to reminderData(addOrReplaceElementWithKey))");
         try {target->addOrReplaceElementWithKey(iKey->previousButtonAsString(), iData->text());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   RBMgr * source;
   IProfile * target;
   RBMgr * iKey;
   IMultiLineEdit * iData;


};   //ReminderConn25


//*****************************************************************************
// Class definition for ReminderConn28
//*****************************************************************************
class ReminderConn28 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn28(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(RBMgr * aSource, IProfile * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   ReminderConn28 & setKey(RBMgr * aSelf) {iKey = aSelf; return *this;};
   IString actionResult() const { return iActionResult; };
   ReminderConn28 & setActionResult(IString aSelf) {
      iActionResult = aSelf;
      notifyObservers(INotificationEvent(actionResultId, *this));
      return *this;
      };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;
   static const INotificationId actionResultId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == RBMgr::currentButtonId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : rbManager(currentButton) to reminderData(elementWithKey))");
         try {setActionResult(target->elementWithKey(iKey->currentButtonAsString()));}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   RBMgr * source;
   IProfile * target;
   RBMgr * iKey;
   IString iActionResult;


};   //ReminderConn28

const INotificationId ReminderConn28::exceptionId = "ReminderConn28::exceptionId";
const INotificationId ReminderConn28::actionResultId = "ReminderConn28::actionResult";

//*****************************************************************************
// Class definition for ReminderConn30
//*****************************************************************************
class ReminderConn30 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn30(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ReminderConn28 * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn28(actionResult) to mleReminder(text))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setText(source->actionResult());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == ReminderConn28::actionResultId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IMultiLineEdit::textId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ReminderConn28 * source;
   IMultiLineEdit * target;
   Boolean aligning;


};   //ReminderConn30


//*****************************************************************************
// Class definition for ReminderConn41
//*****************************************************************************
class ReminderConn41 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn41(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(ReminderConn28 * aSource, IMultiLineEdit * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == ReminderConn28::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn28(exceptionOccurred) to mleReminder(removeAll))");
         try {target->removeAll();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   ReminderConn28 * source;
   IMultiLineEdit * target;


};   //ReminderConn41


//*****************************************************************************
// Class definition for ReminderConn32
//*****************************************************************************
class ReminderConn32 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn32(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IRadioButton * aSource, RBMgr * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   ReminderConn32 & setACurrentButton(IRadioButton * aSelf) {iACurrentButton = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IRadioButton::selectId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : rbBirthdays(selected) to rbManager(currentButton))");
         try {target->setCurrentButton(iACurrentButton->selectedIndex());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IRadioButton * source;
   RBMgr * target;
   IRadioButton * iACurrentButton;


};   //ReminderConn32


//*****************************************************************************
// Class definition for ReminderConn34
//*****************************************************************************
class ReminderConn34 : public IObserver, public IStandardNotifier {
public:
   virtual  ~ReminderConn34(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IFrameWindow * aSource, IProfile * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   ReminderConn34 & setKey(RBMgr * aSelf) {iKey = aSelf; return *this;};
   ReminderConn34 & setData(IMultiLineEdit * aSelf) {iData = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::closeId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : frmMainWindow(closeEvent) to reminderData(addOrReplaceElementWithKey))");
         try {target->addOrReplaceElementWithKey(iKey->currentButtonAsString(), iData->text());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IFrameWindow * source;
   IProfile * target;
   RBMgr * iKey;
   IMultiLineEdit * iData;


};   //ReminderConn34


#pragma export (Reminder::readyId)
const INotificationId Reminder::readyId = "Reminder::readyId";

//------------------------------------------------------------------------------
// Reminder :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (Reminder::defaultFramingSpec())
const IRectangle Reminder::defaultFramingSpec()
{
   return(IRectangle(IPoint(30, IWindow::desktopWindow()->size().height() - 30 - 353),ISize(330, 353)));
}


//------------------------------------------------------------------------------
// Reminder :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (Reminder::defaultTitle())
IString Reminder::defaultTitle()
{
   return("Reminder Application");
}


//------------------------------------------------------------------------------
// Reminder :: Reminder
//------------------------------------------------------------------------------
#pragma export (Reminder::Reminder(unsigned long, IWindow*, IWindow*, const IRectangle&, const IFrameWindow::Style&, const char*))
Reminder::Reminder(
      unsigned long id, 
      IWindow* parent, 
      IWindow* owner, 
      const IRectangle& rect, 
      const IFrameWindow::Style& style, 
      const char* title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   ifrmMainWindowMenu = new IMenuBar(this);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_MenuCascade1, "~Options").addSubmenu(id+WNDOFFSET_Reminder_MenuCascade1);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miClear, "~Clear \tAlt+C", id+WNDOFFSET_Reminder_MenuCascade1);
   ifrmMainWindowMenu->addSeparator(id+WNDOFFSET_Reminder_MenuSeparator2, id+WNDOFFSET_Reminder_MenuCascade1);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miExit, "E~xit \tF3", id+WNDOFFSET_Reminder_MenuCascade1);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miHelp, "~Help").addSubmenu(id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miIndexHelp, "~Help Index", id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miGeneralHelp, "~General Help", id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miUsingHelp, "~Using Help", id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miKeysHelp, "~Keys Help", id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowMenu->addSeparator(id+WNDOFFSET_Reminder_MenuSeparator3, id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowMenu->addText(id+WNDOFFSET_Reminder_miProductInfo, "~Product Information", id+WNDOFFSET_Reminder_miHelp);
   ifrmMainWindowAccelTable = new IAccelerator(id+WNDOFFSET_Reminder_frmMainWindow, this);
   iInfoArea1 = new IInfoArea(this, id+WNDOFFSET_Reminder_InfoArea1);
   iMultiCellCanvas = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle());
   iSetCanvas1 = new ISetCanvas(
      id+WNDOFFSET_Reminder_SetCanvas1, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle());
   irbBirthdays = new IRadioButton(
      id+WNDOFFSET_Reminder_rbBirthdays, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IRadioButton::defaultStyle() | IControl::group | IControl::tabStop);
   irbAnniversaries = new IRadioButton(
      id+WNDOFFSET_Reminder_rbAnniversaries, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IRadioButton::defaultStyle() & ~IControl::tabStop);
   irbWorkItems = new IRadioButton(
      id+WNDOFFSET_Reminder_rbWorkItems, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IRadioButton::defaultStyle() & ~IControl::tabStop);
   irbGroceries = new IRadioButton(
      id+WNDOFFSET_Reminder_rbGroceries, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IRadioButton::defaultStyle() & ~IControl::tabStop);
   irbShoppingList = new IRadioButton(
      id+WNDOFFSET_Reminder_rbShoppingList, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IRadioButton::defaultStyle() & ~IControl::tabStop);
   irbOther = new IRadioButton(
      id+WNDOFFSET_Reminder_rbOther, 
      iSetCanvas1, 
      iSetCanvas1, 
      IRectangle(), 
      IRadioButton::defaultStyle() & ~IControl::tabStop);
   imleReminder = new IMultiLineEdit(
      id+WNDOFFSET_Reminder_mleReminder, 
      iMultiCellCanvas, 
      iMultiCellCanvas, 
      IRectangle(), 
      IMultiLineEdit::defaultStyle() | IMultiLineEdit::ignoreTab | IMultiLineEdit::wordWrap | IControl::group | IControl::tabStop);
   imleReminderMenu = new IPopUpMenu(imleReminder, id+WNDOFFSET_Reminder_Menu1);
   imleReminderMenu->addText(id+WNDOFFSET_Reminder_miCut, "Cut");
   imleReminderMenu->addText(id+WNDOFFSET_Reminder_miCopy, "Copy");
   imleReminderMenu->addText(id+WNDOFFSET_Reminder_miPaste, "Paste");
   iflyOverHelp = new IVBFlyText(this);
   ihelpWindow = new IHelpWindow();
   ifrmProductInfo = new IFrameWindow(
      id+WNDOFFSET_Reminder_frmProductInfo, 
      IWindow::desktopWindow(), 
      0, 
      IRectangle(IPoint(474, IWindow::desktopWindow()->size().height() - 285 - 253),ISize(354, 253)), 
      IFrameWindow::defaultStyle() & ~IFrameWindow::maximizeButton & ~IFrameWindow::minimizeButton & ~IFrameWindow::sizingBorder & ~IFrameWindow::systemMenu & ~IWindow::visible | IFrameWindow::dialogBackground | IFrameWindow::dialogBorder, 
      "Product Information");
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      ifrmProductInfo, 
      ifrmProductInfo, 
      IRectangle());
   iscvIcon = new ISetCanvas(
      id+WNDOFFSET_Reminder_scvIcon, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iiconApp = new IIconControl(
      id+WNDOFFSET_Reminder_iconApp, 
      iscvIcon, 
      iscvIcon, 
      IResourceId(7, IDynamicLinkLibrary("bitmaps")), 
      IRectangle ( ), 
      IIconControl::defaultStyle() | IStaticText::fillBackground);
   iscvInfo = new ISetCanvas(
      id+WNDOFFSET_Reminder_scvInfo, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   itxtVersion = new IStaticText(
      id+WNDOFFSET_Reminder_txtVersion, 
      iscvInfo, 
      iscvInfo, 
      IRectangle());
   itxtBy = new IStaticText(
      id+WNDOFFSET_Reminder_txtBy, 
      iscvInfo, 
      iscvInfo, 
      IRectangle());
   itxtAuthors = new IStaticText(
      id+WNDOFFSET_Reminder_txtAuthors, 
      iscvInfo, 
      iscvInfo, 
      IRectangle());
   iscvButton = new ISetCanvas(
      id+WNDOFFSET_Reminder_scvButton, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   ipbOk = new IPushButton(
      id+WNDOFFSET_Reminder_pbOk, 
      iscvButton, 
      iscvButton, 
      IRectangle());
   ireminderData = new IProfile("REMINDER.INI");
   irbManager = new RBMgr();

   conn0 = new ReminderConn0();
   conn1 = new ReminderConn1(id);
   conn2 = new ReminderConn2(id);
   conn3 = new ReminderConn3(id);
   conn8 = new ReminderConn8(id);
   conn9 = new ReminderConn9(id);
   conn11 = new ReminderConn11(id);
   conn12 = new ReminderConn12(id);
   conn13 = new ReminderConn13(id);
   conn14 = new ReminderConn14(id);
   conn15 = new ReminderConn15();
   conn16 = new ReminderConn16();
   conn18 = new ReminderConn18(id);
   conn19 = new ReminderConn19();
   conn20 = new ReminderConn20(id);
   conn21 = new ReminderConn21();
   conn31 = new ReminderConn31();
   conn22 = new ReminderConn22();
   conn23 = new ReminderConn23();
   conn24 = new ReminderConn24();
   conn25 = new ReminderConn25();
   conn28 = new ReminderConn28();
   conn30 = new ReminderConn30();
   conn41 = new ReminderConn41();
   conn32 = new ReminderConn32();
   conn34 = new ReminderConn34();

   iMultiCellCanvas->addToCell(iSetCanvas1, 2, 2, 1, 1);
   iMultiCellCanvas->addToCell(imleReminder, 2, 4, 1, 1);
   iMultiCellCanvas->setColumnWidth(2, IMultiCellCanvas::defaultCell().width(), true);
   iMultiCellCanvas->setColumnWidth(3, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas->setRowHeight(4, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas->setRowHeight(5, IMultiCellCanvas::defaultCell().height(), false);
   iSetCanvas1->setText("Categories");
   iSetCanvas1->setDeckOrientation(ISetCanvas::vertical);
   iSetCanvas1->setDeckCount(2);
   iSetCanvas1->setMinimumSize(ISize(304, 143));
   irbBirthdays->select(true);
   irbBirthdays->setText("Birthdays");
   irbAnniversaries->setText("Anniversaries");
   irbWorkItems->setText("Work Items");
   irbGroceries->setText("Groceries");
   irbShoppingList->setText("Shopping list");
   irbOther->setText("Other");
   imleReminderIVBPopupMenuHandler = new IVBPopupMenuHandler(imleReminderMenu);
   imleReminderIVBPopupMenuHandler->handleEventsFor(imleReminder);
   imleReminder->setMinimumSize(ISize(302, 126));
   this->setFocus();
   ifrmMainWindowHelpHandler = new HelpHandler();
   ifrmMainWindowHelpHandler->handleEventsFor(this);
   this->setClient(iMultiCellCanvas);
   ihelpWindow->setHelpTable(WND_Reminder);
   ihelpWindow->setAssociatedWindow(this);
   ihelpWindow->setTitle("Reminder Application");
   ihelpWindow->addLibraries("REMINDER.HLP");
   iMultiCellCanvas1->addToCell(iscvIcon, 2, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iscvInfo, 4, 3, 1, 1);
   iMultiCellCanvas1->addToCell(iscvButton, 4, 5, 1, 1);
   iMultiCellCanvas1->setColumnWidth(5, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(5, IMultiCellCanvas::defaultCell().height(), false);
   iscvIcon->setMinimumSize(ISize(60, 120));
   iiconApp->setMinimumSize(ISize(44, 49));
   iscvInfo->setAlignment(ISetCanvas::centerCenter);
   iscvInfo->setText("Reminder Application");
   iscvInfo->setMinimumSize(ISize(263, 132));
   iscvInfo->setDeckCount(3);
   iscvInfo->setPackType(ISetCanvas::even);
   itxtVersion->setAlignment(IStaticText::centerCenter);
   itxtVersion->setText("Version 1.0");
   itxtBy->setText("by:");
   itxtAuthors->setText("Peter Jakab and Dale Nilsson");
   iscvButton->setMinimumSize(ISize(264, 51));
   iscvButton->setPackType(ISetCanvas::expanded);
   ipbOk->setText("OK");
   ifrmProductInfo->setFocus();
   ifrmProductInfo->setClient(iMultiCellCanvas1);
   ireminderData->setDefaultApplicationName("REMINDERS");
}     //end constructor


//------------------------------------------------------------------------------
// Reminder :: ~Reminder
//------------------------------------------------------------------------------
#pragma export (Reminder::~Reminder())
Reminder::~Reminder()
{
   conn0->stopHandlingNotificationsFor(*this);
   conn1->stopHandlingNotificationsFor(*imleReminder);
   conn2->stopHandlingNotificationsFor(*imleReminder);
   conn3->stopHandlingNotificationsFor(*imleReminder);
   conn8->stopHandlingNotificationsFor(*this);
   conn9->stopHandlingNotificationsFor(*this);
   conn11->stopHandlingNotificationsFor(*this);
   conn12->stopHandlingNotificationsFor(*this);
   conn13->stopHandlingNotificationsFor(*this);
   conn14->stopHandlingNotificationsFor(*this);
   conn15->stopHandlingNotificationsFor(*this);
   conn16->stopHandlingNotificationsFor(*this);
   conn18->stopHandlingNotificationsFor(*this);
   conn19->stopHandlingNotificationsFor(*ipbOk);
   conn20->stopHandlingNotificationsFor(*this);
   conn21->stopHandlingNotificationsFor(*ipbOk);
   conn31->stopHandlingNotificationsFor(*iInfoArea1);
   conn31->stopHandlingNotificationsFor(*iflyOverHelp);
   conn22->stopHandlingNotificationsFor(*this);
   conn23->stopHandlingNotificationsFor(*conn22);
   conn23->stopHandlingNotificationsFor(*imleReminder);
   conn24->stopHandlingNotificationsFor(*this);
   conn25->stopHandlingNotificationsFor(*irbManager);
   conn28->stopHandlingNotificationsFor(*irbManager);
   conn30->stopHandlingNotificationsFor(*conn28);
   conn30->stopHandlingNotificationsFor(*imleReminder);
   conn41->stopHandlingNotificationsFor(*conn28);
   conn32->stopHandlingNotificationsFor(*irbBirthdays);
   conn34->stopHandlingNotificationsFor(*this);

   delete conn0;
   delete conn1;
   delete conn2;
   delete conn3;
   delete conn8;
   delete conn9;
   delete conn11;
   delete conn12;
   delete conn13;
   delete conn14;
   delete conn15;
   delete conn16;
   delete conn18;
   delete conn19;
   delete conn20;
   delete conn21;
   delete conn31;
   delete conn22;
   delete conn23;
   delete conn24;
   delete conn25;
   delete conn28;
   delete conn30;
   delete conn41;
   delete conn32;
   delete conn34;

   ifrmMainWindowHelpHandler->stopHandlingEventsFor(this);
   delete ifrmMainWindowHelpHandler;
   delete ifrmMainWindowMenu;
   delete imleReminderMenu;
   imleReminderIVBPopupMenuHandler->stopHandlingEventsFor(imleReminder);
   delete imleReminderIVBPopupMenuHandler;

   delete ifrmMainWindowAccelTable;
   delete iInfoArea1;
   delete iMultiCellCanvas;
   delete iSetCanvas1;
   delete irbBirthdays;
   delete irbAnniversaries;
   delete irbWorkItems;
   delete irbGroceries;
   delete irbShoppingList;
   delete irbOther;
   delete imleReminder;
   delete iflyOverHelp;
   delete ihelpWindow;
   delete ifrmProductInfo;
   delete iMultiCellCanvas1;
   delete iscvIcon;
   delete iiconApp;
   delete iscvInfo;
   delete itxtVersion;
   delete itxtBy;
   delete itxtAuthors;
   delete iscvButton;
   delete ipbOk;
   delete ireminderData;
   delete irbManager;
}

//------------------------------------------------------------------------------
// Reminder :: initializePart
//------------------------------------------------------------------------------
#pragma export (Reminder::initializePart())
Reminder & Reminder::initializePart()
{
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// Reminder :: makeConnections
//------------------------------------------------------------------------------
#pragma export (Reminder::makeConnections())
Boolean Reminder::makeConnections()
{
   this->enableNotification();
   iInfoArea1->enableNotification();
   iMultiCellCanvas->enableNotification();
   iSetCanvas1->enableNotification();
   irbBirthdays->enableNotification();
   irbAnniversaries->enableNotification();
   irbWorkItems->enableNotification();
   irbGroceries->enableNotification();
   irbShoppingList->enableNotification();
   irbOther->enableNotification();
   imleReminder->enableNotification();
   iflyOverHelp->enableNotification();
   ihelpWindow->enableNotification();
   ifrmProductInfo->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iscvIcon->enableNotification();
   iiconApp->enableNotification();
   iscvInfo->enableNotification();
   itxtVersion->enableNotification();
   itxtBy->enableNotification();
   itxtAuthors->enableNotification();
   iscvButton->enableNotification();
   ipbOk->enableNotification();
   irbManager->enableNotification();

   unsigned long id = this->id();
   conn0->initialize(this, irbBirthdays);
   conn0->handleNotificationsFor(*this);
   conn1->initialize(imleReminderMenu, imleReminder);
   conn1->handleNotificationsFor(*imleReminder);
   conn2->initialize(imleReminderMenu, imleReminder);
   conn2->handleNotificationsFor(*imleReminder);
   conn3->initialize(imleReminderMenu, imleReminder);
   conn3->handleNotificationsFor(*imleReminder);
   conn8->initialize(ifrmMainWindowMenu, imleReminder);
   conn8->handleNotificationsFor(*this);
   conn9->initialize(ifrmMainWindowMenu, this);
   conn9->handleNotificationsFor(*this);
   conn11->initialize(ifrmMainWindowMenu, ihelpWindow);
   conn11->handleNotificationsFor(*this);
   conn12->initialize(ifrmMainWindowMenu, ihelpWindow);
   conn12->handleNotificationsFor(*this);
   conn13->initialize(ifrmMainWindowMenu, ihelpWindow);
   conn13->handleNotificationsFor(*this);
   conn14->initialize(ifrmMainWindowMenu, ihelpWindow);
   conn14->handleNotificationsFor(*this);
   conn15->initialize(this, this);
   conn15->handleNotificationsFor(*this);
   conn16->initialize(this, ifrmProductInfo);
   conn16->handleNotificationsFor(*this);
   conn16->setOwner(this);
   conn18->initialize(ifrmMainWindowMenu, ifrmProductInfo);
   conn18->handleNotificationsFor(*this);
   conn19->initialize(ipbOk, ifrmProductInfo);
   conn19->handleNotificationsFor(*ipbOk);
   conn20->initialize(ifrmMainWindowMenu, ifrmProductInfo);
   conn20->handleNotificationsFor(*this);
   conn21->initialize(ipbOk, this);
   conn21->handleNotificationsFor(*ipbOk);
   conn31->initialize(iInfoArea1, iflyOverHelp);
   conn31->handleNotificationsFor(*iInfoArea1);
   conn31->handleNotificationsFor(*iflyOverHelp);
   conn22->initialize(this, ireminderData);
   conn22->handleNotificationsFor(*this);
   conn23->initialize(conn22, imleReminder);
   conn23->handleNotificationsFor(*conn22);
   conn23->handleNotificationsFor(*imleReminder);
   conn24->initialize(this, irbManager);
   conn24->handleNotificationsFor(*this);
   conn25->initialize(irbManager, ireminderData);
   conn25->handleNotificationsFor(*irbManager);
   conn25->setKey(irbManager);
   conn25->setData(imleReminder);
   conn28->initialize(irbManager, ireminderData);
   conn28->handleNotificationsFor(*irbManager);
   conn28->setKey(irbManager);
   conn30->initialize(conn28, imleReminder);
   conn30->handleNotificationsFor(*conn28);
   conn30->handleNotificationsFor(*imleReminder);
   conn41->initialize(conn28, imleReminder);
   conn41->handleNotificationsFor(*conn28);
   conn32->initialize(irbBirthdays, irbManager);
   conn32->handleNotificationsFor(*irbBirthdays);
   conn32->setACurrentButton(irbBirthdays);
   conn34->initialize(this, ireminderData);
   conn34->handleNotificationsFor(*this);
   conn34->setKey(irbManager);
   conn34->setData(imleReminder);

   conn31->setTarget();
   return true;
}



